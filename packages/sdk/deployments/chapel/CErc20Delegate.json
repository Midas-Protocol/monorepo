{
  "address": "0x4b16CA229F1c236429eC7fbf9EF2DB5Dee13Bd06",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashPrior",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAdminFeeMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFeeMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "NewComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFuseFeeMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFuseFeeMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewFuseFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "oldInterestRateModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "NewMarketInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "compLikeDelegatee",
          "type": "address"
        }
      ],
      "name": "_delegateCompLikeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_prepare",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        }
      ],
      "name": "_reduceReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAdminFeeMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setAdminFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowResign",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "becomeImplementationData",
          "type": "bytes"
        }
      ],
      "name": "_setImplementationSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "_setInterestRateModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "_setNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "_withdrawAdminFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "_withdrawFuseFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrualBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeSeizeShareMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fuseFeeMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFeeMantissa_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFeeMantissa_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract CTokenInterface",
          "name": "cTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSeizeShareMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAdminFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowsCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFuseFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9beb751a09124c06fc367bdedb3ac3534ee3a23065bd5b6ce5881d8002015614",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x304aE8f9300e09c8B33bb1a8AE1c14A6253a5F4D",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "5239507",
    "logsBloom": "0x
    "blockHash": "0xf2cc761feeaa3423cb8dc03d9da79545df0a4c4a9223822811821559c994d220",
    "transactionHash": "0x9beb751a09124c06fc367bdedb3ac3534ee3a23065bd5b6ce5881d8002015614",
    "logs": [],
    "blockNumber": 17265925,
    "cumulativeGasUsed": "6592865",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "cdaa356e21f74b41673ce069a5a3b631",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAdminFeeMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFeeMantissa\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFuseFeeMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFuseFeeMantissa\",\"type\":\"uint256\"}],\"name\":\"NewFuseFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"compLikeDelegatee\",\"type\":\"address\"}],\"name\":\"_delegateCompLikeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_prepare\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminFeeMantissa\",\"type\":\"uint256\"}],\"name\":\"_setAdminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowResign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"}],\"name\":\"_setImplementationSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"_setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"_withdrawAdminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"_withdrawFuseFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuseFeeMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeMantissa_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeMantissa_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFuseFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded bytes data for any initialization\"}},\"_delegateCompLikeTo(address)\":{\"details\":\"CTokens whose underlying are not CompLike should revert here\",\"params\":{\"compLikeDelegatee\":\"The address to delegate votes to\"}},\"_prepare()\":{\"details\":\"Checks comptroller.autoImplementation and upgrades the implementation if necessary\"},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setAdminFee(uint256)\":{\"details\":\"Admin function to accrue interest and set a new admin fee\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setImplementationSafe(address,bool,bytes)\":{\"params\":{\"allowResign\":\"Flag to indicate whether to call _resignImplementation on the old implementation\",\"becomeImplementationData\":\"The encoded bytes data to be passed to _becomeImplementation\",\"implementation_\":\"The address of the new implementation for delegation\"}},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setNameAndSymbol(string,string)\":{\"details\":\"Admin function to update the cToken ERC20 name and symbol\",\"params\":{\"_name\":\"the new ERC20 token name to use\",\"_symbol\":\"the new ERC20 token symbol to use\"}},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_withdrawAdminFees(uint256)\":{\"params\":{\"withdrawAmount\":\"Amount of fees to withdraw\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_withdrawFuseFees(uint256)\":{\"params\":{\"withdrawAmount\":\"Amount of fees to withdraw\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"The number of tokens allowed to be spent (-1 means infinite)\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The number of tokens owned by `owner`\"}},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The amount of underlying owned by `owner`\"}},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowRatePerBlock()\":{\"returns\":{\"_0\":\"The borrow interest rate per block, scaled by 1e18\"}},\"exchangeRateCurrent()\":{\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"returns\":{\"_0\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"}},\"getCash()\":{\"returns\":{\"_0\":\"The quantity of underlying asset owned by this contract\"}},\"initialize(address,address,address,string,string,uint256,uint256)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"initialize(address,address,uint256,string,string,uint8,uint256,uint256)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"liquidateBorrow(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"mint(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"mintAmount\":\"The amount of the underlying asset to supply\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrow(uint256)\":{\"params\":{\"repayAmount\":\"The amount to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrowBehalf(address,uint256)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\",\"repayAmount\":\"The amount to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"supplyRatePerBlock()\":{\"returns\":{\"_0\":\"The supply interest rate per block, scaled by 1e18\"}},\"totalBorrowsCurrent()\":{\"returns\":{\"_0\":\"The total borrows with interest\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"title\":\"Compound's CErc20Delegate Contract\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueInterest(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when interest is accrued\"},\"Approval(address,address,uint256)\":{\"notice\":\"EIP20 Approval event\"},\"Borrow(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when underlying is borrowed\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewAdminFee(uint256,uint256)\":{\"notice\":\"Event emitted when the admin fee is changed\"},\"NewComptroller(address,address)\":{\"notice\":\"Event emitted when comptroller is changed\"},\"NewFuseFee(uint256,uint256)\":{\"notice\":\"Event emitted when the Fuse fee is changed\"},\"NewImplementation(address,address)\":{\"notice\":\"Emitted when implementation is changed\"},\"NewMarketInterestRateModel(address,address)\":{\"notice\":\"Event emitted when interestRateModel is changed\"},\"NewReserveFactor(uint256,uint256)\":{\"notice\":\"Event emitted when the reserve factor is changed\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are redeemed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"},\"ReservesAdded(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are added\"},\"ReservesReduced(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are reduced\"},\"Transfer(address,address,uint256)\":{\"notice\":\"EIP20 Transfer event\"}},\"kind\":\"user\",\"methods\":{\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_delegateCompLikeTo(address)\":{\"notice\":\"Admin call to delegate the votes of the COMP-like underlying\"},\"_prepare()\":{\"notice\":\"Function called before all delegator functions\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_setAdminFee(uint256)\":{\"notice\":\"accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\"},\"_setImplementationSafe(address,bool,bytes)\":{\"notice\":\"Called by the admin to update the implementation of the delegator\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setNameAndSymbol(string,string)\":{\"notice\":\"updates the cToken ERC20 name and symbol\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"_withdrawAdminFees(uint256)\":{\"notice\":\"Accrues interest and reduces admin fees by transferring to admin\"},\"_withdrawFuseFees(uint256)\":{\"notice\":\"Accrues interest and reduces Fuse fees by transferring to Fuse\"},\"accrualBlockNumber()\":{\"notice\":\"Block number that interest was last accrued at\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"adminFeeMantissa()\":{\"notice\":\"Fraction of interest currently set aside for admin fees\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"comptroller()\":{\"notice\":\"Contract which oversees inter-cToken operations\"},\"constructor\":{\"notice\":\"Construct an empty delegate\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"fuseFeeMantissa()\":{\"notice\":\"Fraction of interest currently set aside for Fuse fees\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"implementation()\":{\"notice\":\"Implementation address for this contract\"},\"initialize(address,address,address,string,string,uint256,uint256)\":{\"notice\":\"Initialize the new money market\"},\"initialize(address,address,uint256,string,string,uint8,uint256,uint256)\":{\"notice\":\"Initialize the money market\"},\"interestRateModel()\":{\"notice\":\"Model which tells what the current interest rate should be\"},\"isCEther()\":{\"notice\":\"Indicator that this is or is not a CEther contract (for inspection)\"},\"isCToken()\":{\"notice\":\"Indicator that this is a CToken contract (for inspection)\"},\"liquidateBorrow(address,uint256,address)\":{\"notice\":\"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator.\"},\"mint(uint256)\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"repayBorrow(uint256)\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address,uint256)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"reserveFactorMantissa()\":{\"notice\":\"Fraction of interest currently set aside for reserves\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalAdminFees()\":{\"notice\":\"Total amount of admin fees of the underlying held in this market\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the underlying in this market\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"totalFuseFees()\":{\"notice\":\"Total amount of Fuse fees of the underlying held in this market\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"underlying()\":{\"notice\":\"Underlying asset for this CToken\"}},\"notice\":\"CTokens which wrap an EIP-20 underlying and are delegated to\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/CErc20Delegate.sol\":\"CErc20Delegate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/compound/CDelegateInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationSafe(\\n    address implementation_,\\n    bool allowResign,\\n    bytes calldata becomeImplementationData\\n  ) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes calldata data) external virtual;\\n\\n  /**\\n   * @notice Function called before all delegator functions\\n   * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary\\n   */\\n  function _prepare() external payable virtual;\\n}\\n\",\"keccak256\":\"0xaaab890b303b5e86ca942c714b0a8ff82870dc9404642ae466283797baffab78\",\"license\":\"UNLICENSED\"},\"contracts/compound/CErc20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ninterface CompLike {\\n  function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\\n * @author Compound\\n */\\ncontract CErc20 is CToken, CErc20Interface {\\n  /**\\n   * @notice Initialize the new money market\\n   * @param underlying_ The address of the underlying asset\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param name_ ERC-20 name of this token\\n   * @param symbol_ ERC-20 symbol of this token\\n   */\\n  function initialize(\\n    address underlying_,\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) public {\\n    // CToken initialize does the bulk of the work\\n    uint256 initialExchangeRateMantissa_ = 0.2e18;\\n    uint8 decimals_ = EIP20Interface(underlying_).decimals();\\n    super.initialize(\\n      comptroller_,\\n      interestRateModel_,\\n      initialExchangeRateMantissa_,\\n      name_,\\n      symbol_,\\n      decimals_,\\n      reserveFactorMantissa_,\\n      adminFeeMantissa_\\n    );\\n\\n    // Set underlying and sanity check it\\n    underlying = underlying_;\\n    EIP20Interface(underlying).totalSupply();\\n  }\\n\\n  /*** User Interface ***/\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function mint(uint256 mintAmount) external override returns (uint256) {\\n    (uint256 err, ) = mintInternal(mintAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeem(uint256 redeemTokens) external override returns (uint256) {\\n    return redeemInternal(redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to redeem\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlying(uint256 redeemAmount) external override returns (uint256) {\\n    return redeemUnderlyingInternal(redeemAmount);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrow(uint256 borrowAmount) external override returns (uint256) {\\n    return borrowInternal(borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrow(uint256 repayAmount) external override returns (uint256) {\\n    (uint256 err, ) = repayBorrowInternal(repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override returns (uint256) {\\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external override returns (uint256) {\\n    (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n    return err;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashPrior() internal view virtual override returns (uint256) {\\n    EIP20Interface token = EIP20Interface(underlying);\\n    return token.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n   *      This will revert due to insufficient balance or insufficient allowance.\\n   *      This function returns the actual amount received,\\n   *      which may be less than `amount` if there is a fee attached to the transfer.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual override returns (uint256) {\\n    uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transferFrom.selector, from, address(this), amount),\\n      \\\"TOKEN_TRANSFER_IN_FAILED\\\"\\n    );\\n\\n    // Calculate the amount that was *actually* transferred\\n    uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n    require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n   *      it is >= amount, this should not revert in normal conditions.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual override {\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20NonStandardInterface(underlying).transfer.selector, to, amount),\\n      \\\"TOKEN_TRANSFER_OUT_FAILED\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\\n    bytes memory returndata = _functionCall(underlying, data, errorMessage);\\n    if (returndata.length > 0) require(abi.decode(returndata, (bool)), errorMessage);\\n  }\\n\\n  /**\\n   * @notice Admin call to delegate the votes of the COMP-like underlying\\n   * @param compLikeDelegatee The address to delegate votes to\\n   * @dev CTokens whose underlying are not CompLike should revert here\\n   */\\n  function _delegateCompLikeTo(address compLikeDelegatee) external {\\n    require(hasAdminRights(), \\\"only the admin may set the comp-like delegate\\\");\\n    CompLike(underlying).delegate(compLikeDelegatee);\\n  }\\n}\\n\",\"keccak256\":\"0x6c72a6738943e05b65f6e64e1bc7c61c80d99d0632fd3c09d7d555992b8d3cf8\",\"license\":\"UNLICENSED\"},\"contracts/compound/CErc20Delegate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CErc20.sol\\\";\\nimport \\\"./CDelegateInterface.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Delegate Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\n * @author Compound\\n */\\ncontract CErc20Delegate is CDelegateInterface, CErc20 {\\n  /**\\n   * @notice Construct an empty delegate\\n   */\\n  constructor() {}\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes calldata data) external virtual override {\\n    require(msg.sender == address(this) || hasAdminRights(), \\\"!self\\\");\\n\\n    // Make sure admin storage is set up correctly\\n    __admin = payable(0);\\n    __adminHasRights = false;\\n    __fuseAdminHasRights = false;\\n  }\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() internal virtual {\\n    // Shh -- we don't ever want this hook to be marked pure\\n    if (false) {\\n      implementation = address(0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationInternal(\\n    address implementation_,\\n    bool allowResign,\\n    bytes memory becomeImplementationData\\n  ) internal {\\n    // Check whitelist\\n    require(fuseAdmin.cErc20DelegateWhitelist(implementation, implementation_, allowResign), \\\"!impl\\\");\\n\\n    // Call _resignImplementation internally (this delegate's code)\\n    if (allowResign) _resignImplementation();\\n\\n    // Get old implementation\\n    address oldImplementation = implementation;\\n\\n    // Store new implementation\\n    implementation = implementation_;\\n\\n    // Call _becomeImplementation externally (delegating to new delegate's code)\\n    _functionCall(\\n      address(this),\\n      abi.encodeWithSignature(\\\"_becomeImplementation(bytes)\\\", becomeImplementationData),\\n      \\\"!become\\\"\\n    );\\n\\n    // Emit event\\n    emit NewImplementation(oldImplementation, implementation);\\n  }\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationSafe(\\n    address implementation_,\\n    bool allowResign,\\n    bytes calldata becomeImplementationData\\n  ) external override {\\n    // Check admin rights\\n    require(hasAdminRights(), \\\"!admin\\\");\\n\\n    // Set implementation\\n    _setImplementationInternal(implementation_, allowResign, becomeImplementationData);\\n  }\\n\\n  /**\\n   * @notice Function called before all delegator functions\\n   * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary\\n   */\\n  function _prepare() external payable override {\\n    if (msg.sender != address(this) && ComptrollerV3Storage(address(comptroller)).autoImplementation()) {\\n      (address latestCErc20Delegate, bool allowResign, bytes memory becomeImplementationData) = fuseAdmin\\n        .latestCErc20Delegate(implementation);\\n      if (implementation != latestCErc20Delegate)\\n        _setImplementationInternal(latestCErc20Delegate, allowResign, becomeImplementationData);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4daa28b658128a213c21b1ee2ff058375499e7a059953f6838c98a59cdf837f0\",\"license\":\"UNLICENSED\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n    return\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\n      (msg.sender == address(fuseAdmin) && comptrollerStorage.fuseAdminHasRights());\\n  }\\n\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) public {\\n    require(msg.sender == address(fuseAdmin), \\\"only Fuse admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint256 err = _setComptroller(comptroller_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // Set reserve factor\\n    err = _setReserveFactorFresh(reserveFactorMantissa_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting reserve factor failed\\\");\\n\\n    // Set admin fee\\n    err = _setAdminFeeFresh(adminFeeMantissa_);\\n    require(err == uint256(Error.NO_ERROR), \\\"setting admin fee failed\\\");\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @dev Returns latest pending Fuse fee (to be set with `_setFuseFeeFresh`)\\n   */\\n  function getPendingFuseFeeFromAdmin() internal view returns (uint256) {\\n    return fuseAdmin.interestFeeRate();\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferTokens(\\n    address spender,\\n    address src,\\n    address dst,\\n    uint256 tokens\\n  ) internal returns (uint256) {\\n    /* Fail if transfer not allowed */\\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint256 startingAllowance = 0;\\n    if (spender == src) {\\n      startingAllowance = type(uint256).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    MathError mathErr;\\n    uint256 allowanceNew;\\n    uint256 srcTokensNew;\\n    uint256 dstTokensNew;\\n\\n    (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n    }\\n\\n    (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n    }\\n\\n    (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srcTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint256).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant(false) returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant(false) returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n    (MathError mErr, uint256 balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n    require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n    return balance;\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 cTokenBalance = accountTokens[account];\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n\\n    MathError mErr;\\n\\n    (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n    if (mErr != MathError.NO_ERROR) {\\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n    }\\n\\n    (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (mErr != MathError.NO_ERROR) {\\n      return (uint256(Error.MATH_ERROR), 0, 0, 0);\\n    }\\n\\n    return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this cToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint256) {\\n    return\\n      interestRateModel.getBorrowRate(\\n        getCashPrior(),\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this cToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint256) {\\n    return\\n      interestRateModel.getSupplyRate(\\n        getCashPrior(),\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees)),\\n        reserveFactorMantissa + fuseFeeMantissa + adminFeeMantissa\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint256) {\\n    (MathError err, uint256 result) = borrowBalanceStoredInternal(account);\\n    require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint256) {\\n    /* Note: we do not assert that the market is up to date */\\n    MathError mathErr;\\n    uint256 principalTimesIndex;\\n    uint256 result;\\n\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return (mathErr, 0);\\n    }\\n\\n    (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n    if (mathErr != MathError.NO_ERROR) {\\n      return (mathErr, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, result);\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant(false) returns (uint256) {\\n    require(accrueInterest() == uint256(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint256) {\\n    (MathError err, uint256 result) = exchangeRateStoredInternal();\\n    require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return (error code, calculated exchange rate scaled by 1e18)\\n   */\\n  function exchangeRateStoredInternal() internal view returns (MathError, uint256) {\\n    uint256 _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalFuseFees + totalAdminFees)) / totalSupply\\n       */\\n      uint256 totalCash = getCashPrior();\\n      uint256 cashPlusBorrowsMinusReserves;\\n      Exp memory exchangeRate;\\n      MathError mathErr;\\n\\n      (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\\n        totalCash,\\n        totalBorrows,\\n        add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n      );\\n      if (mathErr != MathError.NO_ERROR) {\\n        return (mathErr, 0);\\n      }\\n\\n      (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n      if (mathErr != MathError.NO_ERROR) {\\n        return (mathErr, 0);\\n      }\\n\\n      return (MathError.NO_ERROR, exchangeRate.mantissa);\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint256) {\\n    /* Remember the initial block number */\\n    uint256 currentBlockNumber = getBlockNumber();\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumber == currentBlockNumber) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint256 cashPrior = getCashPrior();\\n\\n    /* Calculate the current borrow interest rate */\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\\n      cashPrior,\\n      totalBorrows,\\n      add_(totalReserves, add_(totalAdminFees, totalFuseFees))\\n    );\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    (MathError mathErr, uint256 blockDelta) = subUInt(currentBlockNumber, accrualBlockNumber);\\n    require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n    return finishInterestAccrual(currentBlockNumber, cashPrior, borrowRateMantissa, blockDelta);\\n  }\\n\\n  /**\\n   * @dev Split off from `accrueInterest` to avoid \\\"stack too deep\\\" error\\\".\\n   */\\n  function finishInterestAccrual(\\n    uint256 currentBlockNumber,\\n    uint256 cashPrior,\\n    uint256 borrowRateMantissa,\\n    uint256 blockDelta\\n  ) private returns (uint256) {\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  totalFuseFeesNew = interestAccumulated * fuseFee + totalFuseFees\\n     *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n    uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\\n    uint256 totalBorrowsNew = add_(interestAccumulated, totalBorrows);\\n    uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: reserveFactorMantissa }),\\n      interestAccumulated,\\n      totalReserves\\n    );\\n    uint256 totalFuseFeesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: fuseFeeMantissa }),\\n      interestAccumulated,\\n      totalFuseFees\\n    );\\n    uint256 totalAdminFeesNew = mul_ScalarTruncateAddUInt(\\n      Exp({ mantissa: adminFeeMantissa }),\\n      interestAccumulated,\\n      totalAdminFees\\n    );\\n    uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n    totalFuseFees = totalFuseFeesNew;\\n    totalAdminFees = totalAdminFeesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    return mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  struct MintLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 mintTokens;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n    uint256 actualMintAmount;\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal returns (uint256, uint256) {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n    }\\n\\n    MintLocalVars memory vars;\\n\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr)), 0);\\n    }\\n\\n    // Check max supply\\n    // unused function\\n    /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n      vars.actualMintAmount,\\n      Exp({ mantissa: vars.exchangeRateMantissa })\\n    );\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     */\\n    vars.totalSupplyNew = add_(totalSupply, vars.mintTokens);\\n\\n    vars.accountTokensNew = add_(accountTokens[minter], vars.mintTokens);\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[minter] = vars.accountTokensNew;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n    emit Transfer(address(this), minter, vars.mintTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n      return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n    }\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n      return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n    }\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, 0, redeemAmount);\\n  }\\n\\n  struct RedeemLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemFresh(\\n    address redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal returns (uint256) {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n    RedeemLocalVars memory vars;\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      vars.redeemTokens = redeemTokensIn;\\n\\n      (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n        Exp({ mantissa: vars.exchangeRateMantissa }),\\n        redeemTokensIn\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n\\n      (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n        redeemAmountIn,\\n        Exp({ mantissa: vars.exchangeRateMantissa })\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n\\n      vars.redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n    }\\n\\n    /*\\n     * We calculate the new total supply and redeemer balance, checking for underflow:\\n     *  totalSupplyNew = totalSupply - redeemTokens\\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n     */\\n    (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < vars.redeemAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, vars.redeemAmount);\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[redeemer] = vars.accountTokensNew;\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n    }\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return borrowFresh(msg.sender, borrowAmount);\\n  }\\n\\n  struct BorrowLocalVars {\\n    MathError mathErr;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowFresh(address borrower, uint256 borrowAmount) internal returns (uint256) {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    uint256 cashPrior = getCashPrior();\\n\\n    if (cashPrior < borrowAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n    }\\n\\n    BorrowLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowsNew = accountBorrows + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        );\\n    }\\n\\n    // Check min borrow for this user for this asset\\n    allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\n    internal\\n    nonReentrant(false)\\n    returns (uint256, uint256)\\n  {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n      return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n    }\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  struct RepayBorrowLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 repayAmount;\\n    uint256 borrowerIndex;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n    uint256 actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of undelrying tokens being returned\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n    }\\n\\n    RepayBorrowLocalVars memory vars;\\n\\n    /* We remember the original borrowerIndex for verification purposes */\\n    vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return (\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        ),\\n        0\\n      );\\n    }\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    if (repayAmount == type(uint256).max) {\\n      vars.repayAmount = vars.accountBorrows;\\n    } else {\\n      vars.repayAmount = repayAmount;\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal nonReentrant(false) returns (uint256, uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n    }\\n\\n    error = cTokenCollateral.accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(\\n      address(this),\\n      address(cTokenCollateral),\\n      liquidator,\\n      borrower,\\n      repayAmount\\n    );\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    (uint256 repayBorrowError, uint256 actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n    if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n      return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n      address(this),\\n      address(cTokenCollateral),\\n      actualRepayAmount\\n    );\\n    require(amountSeizeError == uint256(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    uint256 seizeError;\\n    if (address(cTokenCollateral) == address(this)) {\\n      seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n    }\\n\\n    /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n    require(seizeError == uint256(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n    return (uint256(Error.NO_ERROR), actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant(true) returns (uint256) {\\n    return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n  }\\n\\n  struct SeizeInternalLocalVars {\\n    MathError mathErr;\\n    uint256 borrowerTokensNew;\\n    uint256 liquidatorTokensNew;\\n    uint256 liquidatorSeizeTokens;\\n    uint256 protocolSeizeTokens;\\n    uint256 protocolSeizeAmount;\\n    uint256 exchangeRateMantissa;\\n    uint256 totalReservesNew;\\n    uint256 totalFuseFeeNew;\\n    uint256 totalSupplyNew;\\n    uint256 feeSeizeTokens;\\n    uint256 feeSeizeAmount;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal returns (uint256) {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n    }\\n\\n    SeizeInternalLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    vars.protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    vars.feeSeizeTokens = mul_(seizeTokens, Exp({ mantissa: feeSeizeShareMantissa }));\\n    vars.liquidatorSeizeTokens = sub_(sub_(seizeTokens, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n\\n    (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"exchange rate math error\\\");\\n\\n    vars.protocolSeizeAmount = mul_ScalarTruncate(\\n      Exp({ mantissa: vars.exchangeRateMantissa }),\\n      vars.protocolSeizeTokens\\n    );\\n    vars.feeSeizeAmount = mul_ScalarTruncate(Exp({ mantissa: vars.exchangeRateMantissa }), vars.feeSeizeTokens);\\n\\n    vars.totalReservesNew = add_(totalReserves, vars.protocolSeizeAmount);\\n    vars.totalSupplyNew = sub_(sub_(totalSupply, vars.protocolSeizeTokens), vars.feeSeizeTokens);\\n    vars.totalFuseFeeNew = add_(totalFuseFees, vars.feeSeizeAmount);\\n\\n    (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    totalReserves = vars.totalReservesNew;\\n    totalSupply = vars.totalSupplyNew;\\n    totalFuseFees = vars.totalFuseFeeNew;\\n\\n    accountTokens[borrower] = vars.borrowerTokensNew;\\n    accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n    emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Internal function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint256) {\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\\n   * @dev Admin function to accrue interest and set a new admin fee\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee change failed.\\n      return fail(Error(error), FailureInfo.SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setAdminFeeFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setAdminFeeFresh(newAdminFeeMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new admin fee for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new admin fee\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setAdminFeeFresh(uint256 newAdminFeeMantissa) internal returns (uint256) {\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\\n    }\\n\\n    // Sanitize newAdminFeeMantissa\\n    if (newAdminFeeMantissa == type(uint256).max) newAdminFeeMantissa = adminFeeMantissa;\\n\\n    // Get latest Fuse fee\\n    uint256 newFuseFeeMantissa = getPendingFuseFeeFromAdmin();\\n\\n    // Check reserveFactorMantissa + newAdminFeeMantissa + newFuseFeeMantissa \\u2264 reserveFactorPlusFeesMaxMantissa\\n    if (add_(add_(reserveFactorMantissa, newAdminFeeMantissa), newFuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n      return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\\n    }\\n\\n    // If setting admin fee\\n    if (adminFeeMantissa != newAdminFeeMantissa) {\\n      // Check caller is admin\\n      if (!hasAdminRights()) {\\n        return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\\n      }\\n\\n      // Set admin fee\\n      uint256 oldAdminFeeMantissa = adminFeeMantissa;\\n      adminFeeMantissa = newAdminFeeMantissa;\\n\\n      // Emit event\\n      emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\\n    }\\n\\n    // If setting Fuse fee\\n    if (fuseFeeMantissa != newFuseFeeMantissa) {\\n      // Set Fuse fee\\n      uint256 oldFuseFeeMantissa = fuseFeeMantissa;\\n      fuseFeeMantissa = newFuseFeeMantissa;\\n\\n      // Emit event\\n      emit NewFuseFee(oldFuseFeeMantissa, newFuseFeeMantissa);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n      return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (add_(add_(newReserveFactorMantissa, adminFeeMantissa), fuseFeeMantissa) > reserveFactorPlusFeesMaxMantissa) {\\n      return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n    }\\n\\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n      return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n    // totalReserves - reduceAmount\\n    uint256 totalReservesNew;\\n\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked reduceAmount <= totalReserves above, so this should never revert.\\n    totalReservesNew = sub_(totalReserves, reduceAmount);\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(msg.sender, reduceAmount);\\n\\n    emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces Fuse fees by transferring to Fuse\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawFuseFees(uint256 withdrawAmount) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted Fuse fee withdrawal failed.\\n      return fail(Error(error), FailureInfo.WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _withdrawFuseFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _withdrawFuseFeesFresh(withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces Fuse fees by transferring to Fuse\\n   * @dev Requires fresh interest accrual\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawFuseFeesFresh(uint256 withdrawAmount) internal returns (uint256) {\\n    // totalFuseFees - reduceAmount\\n    uint256 totalFuseFeesNew;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_FUSE_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check withdrawAmount \\u2264 fuseFees[n] (totalFuseFees)\\n    if (withdrawAmount > totalFuseFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_FUSE_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked withdrawAmount <= totalFuseFees above, so this should never revert.\\n    totalFuseFeesNew = sub_(totalFuseFees, withdrawAmount);\\n\\n    // Store fuseFees[n+1] = fuseFees[n] - withdrawAmount\\n    totalFuseFees = totalFuseFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(fuseAdmin), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces admin fees by transferring to admin\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFees(uint256 withdrawAmount) external nonReentrant(false) returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted admin fee withdrawal failed.\\n      return fail(Error(error), FailureInfo.WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _withdrawAdminFeesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _withdrawAdminFeesFresh(withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces admin fees by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFeesFresh(uint256 withdrawAmount) internal returns (uint256) {\\n    // totalAdminFees - reduceAmount\\n    uint256 totalAdminFeesNew;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    // Check withdrawAmount \\u2264 adminFees[n] (totalAdminFees)\\n    if (withdrawAmount > totalAdminFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    // We checked withdrawAmount <= totalAdminFees above, so this should never revert.\\n    totalAdminFeesNew = sub_(totalAdminFees, withdrawAmount);\\n\\n    // Store adminFees[n+1] = adminFees[n] - withdrawAmount\\n    totalAdminFees = totalAdminFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(uint160(UnitrollerAdminStorage(address(comptroller)).admin())), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint256) {\\n    uint256 error = accrueInterest();\\n    if (error != uint256(Error.NO_ERROR)) {\\n      // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n      return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n    }\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    // Attempt to reset interest checkpoints on old IRM\\n    if (address(oldInterestRateModel) != address(0))\\n      address(oldInterestRateModel).call(abi.encodeWithSignature(\\\"resetInterestCheckpoints()\\\"));\\n\\n    // Attempt to add first interest checkpoint on new IRM\\n    address(newInterestRateModel).call(abi.encodeWithSignature(\\\"checkpointInterest()\\\"));\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice updates the cToken ERC20 name and symbol\\n   * @dev Admin function to update the cToken ERC20 name and symbol\\n   * @param _name the new ERC20 token name to use\\n   * @param _symbol the new ERC20 token symbol to use\\n   */\\n  function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\\n    // Check caller is admin\\n    require(hasAdminRights(), \\\"caller not admin\\\");\\n\\n    // Set ERC20 name and symbol\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual {}\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant(bool localOnly) {\\n    _beforeNonReentrant(localOnly);\\n    _;\\n    _afterNonReentrant(localOnly);\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n   */\\n  function _beforeNonReentrant(bool localOnly) private {\\n    require(_notEntered, \\\"re-entered\\\");\\n    if (!localOnly) comptroller._beforeNonReentrant();\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n   */\\n  function _afterNonReentrant(bool localOnly) private {\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n    if (!localOnly) comptroller._afterNonReentrant();\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.call(data);\\n\\n    if (!success) {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n\\n    return returndata;\\n  }\\n}\\n\",\"keccak256\":\"0x829de30e9c16897e7c1d8575102316ca916f8b76b1d0df9289d7c81032a2e79e\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenAdminStorage {\\n  /*\\n   * Administrator for Fuse\\n   */\\n  IFuseFeeDistributor internal constant fuseAdmin =\\n    IFuseFeeDistributor(payable(0x0B1638cE0c7Dc434b2Ad41fFBc016690A24933d2));\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Administrator for this contract\\n   */\\n  address payable internal __admin;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Whether or not the Fuse admin has admin rights\\n   */\\n  bool internal __fuseAdminHasRights;\\n\\n  /**\\n   * @dev LEGACY USE ONLY: Whether or not the admin has admin rights\\n   */\\n  bool internal __adminHasRights;\\n}\\n\\ncontract CTokenStorage is CTokenAdminStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  /*\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\n   */\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /*\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\n   */\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n  /*\\n   * LEGACY USE ONLY: Pending administrator for this contract\\n   */\\n  address payable private __pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  /*\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n   */\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for admin fees\\n   */\\n  uint256 public adminFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for Fuse fees\\n   */\\n  uint256 public fuseFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total amount of admin fees of the underlying held in this market\\n   */\\n  uint256 public totalAdminFees;\\n\\n  /**\\n   * @notice Total amount of Fuse fees of the underlying held in this market\\n   */\\n  uint256 public totalFuseFees;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  /*\\n   * Official record of token balances for each account\\n   */\\n  mapping(address => uint256) internal accountTokens;\\n\\n  /*\\n   * Approved token transfer amounts on behalf of others\\n   */\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  /*\\n   * Mapping of account addresses to outstanding borrow balances\\n   */\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /*\\n   * Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n  /*\\n   * Share of seized collateral taken as fees\\n   */\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n  /**\\n   * @notice Indicator that this is a CToken contract (for inspection)\\n   */\\n  function isCToken() external virtual returns (bool) {\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Indicator that this is or is not a CEther contract (for inspection)\\n   */\\n  function isCEther() external virtual returns (bool) {\\n    return false;\\n  }\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the admin fee is changed\\n   */\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n  /**\\n   * @notice Event emitted when the Fuse fee is changed\\n   */\\n  event NewFuseFee(uint256 oldFuseFeeMantissa, uint256 newFuseFeeMantissa);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external virtual returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n  function balanceOf(address owner) external view virtual returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint256);\\n\\n  function borrowBalanceStored(address account) public view virtual returns (uint256);\\n\\n  function exchangeRateCurrent() public virtual returns (uint256);\\n\\n  function exchangeRateStored() public view virtual returns (uint256);\\n\\n  function getCash() external view virtual returns (uint256);\\n\\n  function accrueInterest() public virtual returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external virtual returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external virtual returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public virtual returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external virtual returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external virtual returns (uint256);\\n}\\n\\ncontract CEtherInterface is CErc20Storage {}\\n\",\"keccak256\":\"0x3fb8d062b3fca0253b169a3a6f3e70d5ff03fb1cdeccb20764236106d6369ff4\",\"license\":\"UNLICENSED\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n  /**\\n   * @dev Possible error codes that we can return\\n   */\\n  enum MathError {\\n    NO_ERROR,\\n    DIVISION_BY_ZERO,\\n    INTEGER_OVERFLOW,\\n    INTEGER_UNDERFLOW\\n  }\\n\\n  /**\\n   * @dev Multiplies two numbers, returns an error on overflow.\\n   */\\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (a == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    uint256 c = a * b;\\n\\n    if (c / a != b) {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    } else {\\n      return (MathError.NO_ERROR, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Integer division of two numbers, truncating the quotient.\\n   */\\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b == 0) {\\n      return (MathError.DIVISION_BY_ZERO, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, a / b);\\n  }\\n\\n  /**\\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b <= a) {\\n      return (MathError.NO_ERROR, a - b);\\n    } else {\\n      return (MathError.INTEGER_UNDERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds two numbers, returns an error on overflow.\\n   */\\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    uint256 c = a + b;\\n\\n    if (c >= a) {\\n      return (MathError.NO_ERROR, c);\\n    } else {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev add a and b and then subtract c\\n   */\\n  function addThenSubUInt(\\n    uint256 a,\\n    uint256 b,\\n    uint256 c\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, 0);\\n    }\\n\\n    return subUInt(sum, c);\\n  }\\n}\\n\",\"keccak256\":\"0xce97f35471b6f51b4adb3753e831f1d6eee444dc4a982cba20dd5fff571128f4\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nabstract contract ComptrollerInterface {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external virtual returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function mintWithinLimits(\\n    address cToken,\\n    uint256 exchangeRateMantissa,\\n    uint256 accountTokens,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function mintVerify(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount,\\n    uint256 mintTokens\\n  ) external virtual;\\n\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external virtual returns (uint256);\\n\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external virtual;\\n\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual returns (uint256);\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external virtual returns (uint256);\\n\\n  function borrowVerify(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual;\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 borrowerIndex\\n  ) external virtual;\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function liquidateBorrowVerify(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    uint256 seizeTokens\\n  ) external virtual;\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual;\\n\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual returns (uint256);\\n\\n  function transferVerify(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view virtual returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external virtual;\\n\\n  function _afterNonReentrant() external virtual;\\n}\\n\",\"keccak256\":\"0x82d6d81c2b784a7cafce53a5f611c9e33c08c55b262d0b56e425ed0f31a67d8c\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFuseFeeDistributor.sol\\\";\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /*\\n   * Administrator for Fuse\\n   */\\n  IFuseFeeDistributor internal constant fuseAdmin =\\n    IFuseFeeDistributor(payable(0x0B1638cE0c7Dc434b2Ad41fFBc016690A24933d2));\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Whether or not the Fuse admin has admin rights\\n   */\\n  bool public fuseAdminHasRights = true;\\n\\n  /**\\n   * @notice Whether or not the admin has admin rights\\n   */\\n  bool public adminHasRights = true;\\n\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(fuseAdmin) && fuseAdminHasRights);\\n  }\\n\\n  /**\\n   * @notice Active brains of Unitroller\\n   */\\n  address public comptrollerImplementation;\\n\\n  /**\\n   * @notice Pending brains of Unitroller\\n   */\\n  address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  PriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /*\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 internal maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => CToken[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\n    // Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /**\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\n   */\\n  mapping(address => bool) internal borrowers;\\n\\n  /// @notice A list of all borrowers who have entered markets\\n  address[] public allBorrowers;\\n\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\n  mapping(address => uint256) internal borrowerIndexes;\\n\\n  /**\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n   */\\n  mapping(address => bool) public suppliers;\\n\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\n  mapping(address => CToken) public cTokensByUnderlying;\\n\\n  /// @notice Whether or not the supplier whitelist is enforced\\n  bool public enforceWhitelist;\\n\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n  mapping(address => bool) public whitelist;\\n\\n  /// @notice An array of all whitelisted accounts\\n  address[] public whitelistArray;\\n\\n  // Indexes of account addresses in the `whitelistArray` array\\n  mapping(address => uint256) internal whitelistIndexes;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  /**\\n   * @dev Whether or not the implementation should be auto-upgraded.\\n   */\\n  bool public autoImplementation;\\n\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  address public borrowCapGuardian;\\n\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  mapping(address => uint256) public borrowCaps;\\n\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n  mapping(address => uint256) public supplyCaps;\\n\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n  address[] public rewardsDistributors;\\n\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n  bool internal _notEntered;\\n\\n  /// @dev Whether or not _notEntered has been initialized\\n  bool internal _notEnteredInitialized;\\n}\\n\",\"keccak256\":\"0xa838bd36840ffceece0115b0a0ff95c3c1d40ea6b4b65a46da974e6e06000b82\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return uint256 The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcea1d290397e1c8eac89c96738e7ec55259a575f878152eeccf33c0cf6d008e5\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transfer(address dst, uint256 amount) external;\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9dfa9662f27e690c0c307a32addde924cd072cf0c050807d990e03190c140754\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_ENTERED, // no longer possible\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY,\\n    SUPPLIER_NOT_WHITELISTED,\\n    BORROW_BELOW_MIN,\\n    SUPPLY_ABOVE_MAX,\\n    NONZERO_TOTAL_SUPPLY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n    SET_WHITELIST_STATUS_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    UNSUPPORT_MARKET_OWNER_CHECK,\\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n    UNSUPPORT_MARKET_IN_USE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    BAD_INPUT,\\n    COMPTROLLER_REJECTION,\\n    COMPTROLLER_CALCULATION_ERROR,\\n    INTEREST_RATE_MODEL_ERROR,\\n    INVALID_ACCOUNT_PAIR,\\n    INVALID_CLOSE_AMOUNT_REQUESTED,\\n    INVALID_COLLATERAL_FACTOR,\\n    MATH_ERROR,\\n    MARKET_NOT_FRESH,\\n    MARKET_NOT_LISTED,\\n    TOKEN_INSUFFICIENT_ALLOWANCE,\\n    TOKEN_INSUFFICIENT_BALANCE,\\n    TOKEN_INSUFFICIENT_CASH,\\n    TOKEN_TRANSFER_IN_FAILED,\\n    TOKEN_TRANSFER_OUT_FAILED,\\n    UTILIZATION_ABOVE_MAX\\n  }\\n\\n  /*\\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\\n   *       This is because FailureInfo grows significantly faster, and\\n   *       the order of Error has some meaning, while the order of FailureInfo\\n   *       is entirely arbitrary.\\n   */\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_FUSE_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    BORROW_ACCRUE_INTEREST_FAILED,\\n    BORROW_CASH_NOT_AVAILABLE,\\n    BORROW_FRESHNESS_CHECK,\\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    BORROW_MARKET_NOT_LISTED,\\n    BORROW_COMPTROLLER_REJECTION,\\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n    LIQUIDATE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n    LIQUIDATE_FRESHNESS_CHECK,\\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_SEIZE_TOO_MUCH,\\n    MINT_ACCRUE_INTEREST_FAILED,\\n    MINT_COMPTROLLER_REJECTION,\\n    MINT_EXCHANGE_CALCULATION_FAILED,\\n    MINT_EXCHANGE_RATE_READ_FAILED,\\n    MINT_FRESHNESS_CHECK,\\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    MINT_TRANSFER_IN_FAILED,\\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\\n    REDEEM_ACCRUE_INTEREST_FAILED,\\n    REDEEM_COMPTROLLER_REJECTION,\\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\\n    REDEEM_FRESHNESS_CHECK,\\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n    WITHDRAW_FUSE_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_FUSE_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_FUSE_FEES_FRESH_CHECK,\\n    WITHDRAW_FUSE_FEES_VALIDATION,\\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n    WITHDRAW_ADMIN_FEES_VALIDATION,\\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n    REDUCE_RESERVES_ADMIN_CHECK,\\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n    REDUCE_RESERVES_FRESH_CHECK,\\n    REDUCE_RESERVES_VALIDATION,\\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_COMPTROLLER_REJECTION,\\n    REPAY_BORROW_FRESHNESS_CHECK,\\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COMPTROLLER_OWNER_CHECK,\\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_ORACLE_MARKET_NOT_LISTED,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_ADMIN_FEE_ADMIN_CHECK,\\n    SET_ADMIN_FEE_FRESH_CHECK,\\n    SET_ADMIN_FEE_BOUNDS_CHECK,\\n    SET_FUSE_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_FUSE_FEE_FRESH_CHECK,\\n    SET_FUSE_FEE_BOUNDS_CHECK,\\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\\n    SET_RESERVE_FACTOR_FRESH_CHECK,\\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n    TRANSFER_COMPTROLLER_REJECTION,\\n    TRANSFER_NOT_ALLOWED,\\n    TRANSFER_NOT_ENOUGH,\\n    TRANSFER_TOO_MUCH,\\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n    ADD_RESERVES_FRESH_CHECK,\\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\\n  }\\n}\\n\",\"keccak256\":\"0x4f36aa20081620a7ffc7373f482d044c2e357cab768f45af2e15dfcccd8c5c9c\",\"license\":\"UNLICENSED\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n  /**\\n   * @dev Creates an exponential from numerator and denominator values.\\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n   *            or if `denom` is zero.\\n   */\\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n  }\\n\\n  /**\\n   * @dev Adds two exponentials, returning a new exponential.\\n   */\\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Subtracts two exponentials, returning a new exponential.\\n   */\\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\\n   */\\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(product));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mulScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return addUInt(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Divide an Exp by a scalar, returning a new Exp.\\n   */\\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, returning a new Exp.\\n   */\\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n    /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n    return getExp(numerator, divisor.mantissa);\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n   */\\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(fraction));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials, returning a new exponential.\\n   */\\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    // We add half the scale before dividing so that we get rounding instead of truncation.\\n    //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n    assert(err2 == MathError.NO_ERROR);\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n   */\\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n  }\\n\\n  /**\\n   * @dev Multiplies three exponentials, returning a new exponential.\\n   */\\n  function mulExp3(\\n    Exp memory a,\\n    Exp memory b,\\n    Exp memory c\\n  ) internal pure returns (MathError, Exp memory) {\\n    (MathError err, Exp memory ab) = mulExp(a, b);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, ab);\\n    }\\n    return mulExp(ab, c);\\n  }\\n\\n  /**\\n   * @dev Divides two exponentials, returning a new exponential.\\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n   */\\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    return getExp(a.mantissa, b.mantissa);\\n  }\\n}\\n\",\"keccak256\":\"0x648e262fbead58731c4347e3539e1c4b6f140d8752405f129874ec23b23b3f09\",\"license\":\"UNLICENSED\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return add_(a, b, \\\"addition overflow\\\");\\n  }\\n\\n  function add_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub_(a, b, \\\"subtraction underflow\\\");\\n  }\\n\\n  function sub_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mul_(a, b, \\\"multiplication overflow\\\");\\n  }\\n\\n  function mul_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b, errorMessage);\\n    return c;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div_(a, b, \\\"divide by zero\\\");\\n  }\\n\\n  function div_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0xec0df0038026b4e9c272de575121befd31d3a306fec5f157aaf1625fc08cfe69\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFuseFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface IFuseFeeDistributor {\\n  function minBorrowEth() external view returns (uint256);\\n\\n  function maxSupplyEth() external view returns (uint256);\\n\\n  function maxUtilizationRate() external view returns (uint256);\\n\\n  function interestFeeRate() external view returns (uint256);\\n\\n  function comptrollerImplementationWhitelist(address oldImplementation, address newImplementation)\\n    external\\n    view\\n    returns (bool);\\n\\n  function cErc20DelegateWhitelist(\\n    address oldImplementation,\\n    address newImplementation,\\n    bool allowResign\\n  ) external view returns (bool);\\n\\n  function cEtherDelegateWhitelist(\\n    address oldImplementation,\\n    address newImplementation,\\n    bool allowResign\\n  ) external view returns (bool);\\n\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n\\n  function latestCErc20Delegate(address oldImplementation)\\n    external\\n    view\\n    returns (\\n      address cErc20Delegate,\\n      bool allowResign,\\n      bytes memory becomeImplementationData\\n    );\\n\\n  function latestCEtherDelegate(address oldImplementation)\\n    external\\n    view\\n    returns (\\n      address cEtherDelegate,\\n      bool allowResign,\\n      bytes memory becomeImplementationData\\n    );\\n\\n  function deployCEther(bytes calldata constructorData) external returns (address);\\n\\n  function deployCErc20(bytes calldata constructorData) external returns (address);\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\",\"keccak256\":\"0xd765ee2dea782f443e59b3a239391bd57e2576d0c5218f1992975b7c2d8b0e3d\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/compound/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(CToken cToken) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x16943951c151400d491d9e73a9e15ec264b54933775b313972cac6c943dddfa0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103815760003560e01c80638d02d9a1116101d1578063b2a02ff111610102578063dc028ab1116100a0578063f5e3c4621161006f578063f5e3c46214610a13578063f8f9da2814610a33578063fca7820b14610a48578063fe9c44ae14610a6857600080fd5b8063dc028ab114610977578063dd62ed3e1461098d578063f2b3abbd146109d3578063f3fdb15a146109f357600080fd5b8063c37f68e2116100dc578063c37f68e2146108e1578063c5ebeaec14610921578063db006a7514610941578063dbfe7c191461096157600080fd5b8063b2a02ff114610890578063bd6d894d146108b0578063be99f119146108c557600080fd5b8063a0b0d2891161016f578063a9059cbb11610149578063a9059cbb14610831578063aa5af0fd14610851578063ac784ddc14610867578063ae9d70b01461087b57600080fd5b8063a0b0d289146107dc578063a6afed95146107fc578063a7b820df1461081157600080fd5b806395d89b41116101ab57806395d89b411461076757806395dd91931461077c578063a03dce8d1461079c578063a0712d68146107bc57600080fd5b80638d02d9a11461071b5780638f840ddd1461073157806391dd36c61461074757600080fd5b80633b1d21a2116102b657806361feacff1161025457806370a082311161022357806370a082311461069057806373acee98146106c65780637f1e06be146106db578063852a12e3146106fb57600080fd5b806361feacff146106295780636752e7021461063f5780636c540baf1461065a5780636f307dc31461067057600080fd5b806356e677281161029057806356e67728146105915780635c60da1b146105b15780635fe3b567146105e9578063601a0bf11461060957600080fd5b80633b1d21a21461054657806347bd37181461055b57806350d85b731461057157600080fd5b8063182df0f5116103235780632608f818116102fd5780632608f818146104ba578063313ce567146104da57806334154d4c146105065780633af9e6691461052657600080fd5b8063182df0f51461047d5780631db789441461049257806323b872dd1461049a57600080fd5b80630f8855e81161035f5780630f8855e81461040f578063173b99041461043157806317bfdfbc1461044757806318160ddd1461046757600080fd5b806306fdde0314610386578063095ea7b3146103b15780630e752702146103e1575b600080fd5b34801561039257600080fd5b5061039b610a7c565b6040516103a891906155e2565b60405180910390f35b3480156103bd57600080fd5b506103d16103cc36600461560a565b610b0a565b60405190151581526020016103a8565b3480156103ed57600080fd5b506104016103fc366004615636565b610b7a565b6040519081526020016103a8565b34801561041b57600080fd5b5061042f61042a366004615723565b610b8e565b005b34801561043d57600080fd5b50610401600a5481565b34801561045357600080fd5b506104016104623660046157dc565b610eb1565b34801561047357600080fd5b5061040160115481565b34801561048957600080fd5b50610401610eff565b61042f610f90565b3480156104a657600080fd5b506103d16104b53660046157f9565b6110ce565b3480156104c657600080fd5b506104016104d536600461560a565b6110f4565b3480156104e657600080fd5b506004546104f49060ff1681565b60405160ff90911681526020016103a8565b34801561051257600080fd5b5061042f61052136600461587c565b61110a565b34801561053257600080fd5b506104016105413660046157dc565b611171565b34801561055257600080fd5b50610401611221565b34801561056757600080fd5b50610401600d5481565b34801561057d57600080fd5b5061042f61058c3660046158f6565b611230565b34801561059d57600080fd5b5061042f6105ac36600461594f565b6112b4565b3480156105bd57600080fd5b506000546105d1906001600160a01b031681565b6040516001600160a01b0390911681526020016103a8565b3480156105f557600080fd5b506005546105d1906001600160a01b031681565b34801561061557600080fd5b50610401610624366004615636565b61130d565b34801561063557600080fd5b50610401600f5481565b34801561064b57600080fd5b50610401666379da05b6000081565b34801561066657600080fd5b50610401600b5481565b34801561067c57600080fd5b506015546105d1906001600160a01b031681565b34801561069c57600080fd5b506104016106ab3660046157dc565b6001600160a01b031660009081526012602052604090205490565b3480156106d257600080fd5b50610401611364565b3480156106e757600080fd5b5061042f6106f63660046157dc565b6113a9565b34801561070757600080fd5b50610401610716366004615636565b61146e565b34801561072757600080fd5b5061040160085481565b34801561073d57600080fd5b50610401600e5481565b34801561075357600080fd5b50610401610762366004615636565b611479565b34801561077357600080fd5b5061039b6114bc565b34801561078857600080fd5b506104016107973660046157dc565b6114c9565b3480156107a857600080fd5b506104016107b7366004615636565b61156a565b3480156107c857600080fd5b506104016107d7366004615636565b6115ad565b3480156107e857600080fd5b5061042f6107f7366004615991565b6115b9565b34801561080857600080fd5b506104016116c5565b34801561081d57600080fd5b5061040161082c366004615636565b61187c565b34801561083d57600080fd5b506103d161084c36600461560a565b6118bf565b34801561085d57600080fd5b50610401600c5481565b34801561087357600080fd5b5060006103d1565b34801561088757600080fd5b506104016118ec565b34801561089c57600080fd5b506104016108ab3660046157f9565b6119af565b3480156108bc57600080fd5b506104016119d3565b3480156108d157600080fd5b5061040167016345785d8a000081565b3480156108ed57600080fd5b506109016108fc3660046157dc565b611a19565b6040805194855260208501939093529183015260608201526080016103a8565b34801561092d57600080fd5b5061040161093c366004615636565b611aba565b34801561094d57600080fd5b5061040161095c366004615636565b611ac5565b34801561096d57600080fd5b5061040160095481565b34801561098357600080fd5b5061040160105481565b34801561099957600080fd5b506104016109a8366004615a40565b6001600160a01b03918216600090815260136020908152604080832093909416825291909152205490565b3480156109df57600080fd5b506104016109ee3660046157dc565b611ad0565b3480156109ff57600080fd5b506006546105d1906001600160a01b031681565b348015610a1f57600080fd5b50610401610a2e366004615a79565b611b08565b348015610a3f57600080fd5b50610401611b20565b348015610a5457600080fd5b50610401610a63366004615636565b611b84565b348015610a7457600080fd5b5060016103d1565b60028054610a8990615abb565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590615abb565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b505050505081565b3360008181526013602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b669087815260200190565b60405180910390a360019150505b92915050565b600080610b8683611bc7565b509392505050565b33730b1638ce0c7dc434b2ad41ffbc016690a24933d214610c085760405162461bcd60e51b815260206004820152602960248201527f6f6e6c7920467573652061646d696e206d617920696e697469616c697a6520746044820152681a19481b585c9ad95d60ba1b60648201526084015b60405180910390fd5b600b54158015610c185750600c54155b610c705760405162461bcd60e51b815260206004820152602360248201527f6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6044820152626e636560e81b6064820152608401610bff565b600786905585610cdb5760405162461bcd60e51b815260206004820152603060248201527f696e697469616c2065786368616e67652072617465206d75737420626520677260448201526f32b0ba32b9103a3430b7103d32b9379760811b6064820152608401610bff565b6000610ce689611c2f565b90508015610d365760405162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c65640000000000006044820152606401610bff565b43600b55670de0b6b3a7640000600c55610d4f88611d5a565b90508015610daa5760405162461bcd60e51b815260206004820152602260248201527f73657474696e6720696e7465726573742072617465206d6f64656c206661696c604482015261195960f21b6064820152608401610bff565b8551610dbd906002906020890190615481565b508451610dd1906003906020880190615481565b506004805460ff191660ff8616179055610dea83611fca565b90508015610e3a5760405162461bcd60e51b815260206004820152601d60248201527f73657474696e67207265736572766520666163746f72206661696c65640000006044820152606401610bff565b610e4382612069565b90508015610e935760405162461bcd60e51b815260206004820152601860248201527f73657474696e672061646d696e20666565206661696c656400000000000000006044820152606401610bff565b50506001805460ff60b01b1916600160b01b17905550505050505050565b600080610ebd81612183565b6000610ec76116c5565b14610ee45760405162461bcd60e51b8152600401610bff90615b06565b610eed836114c9565b91505b610ef981612247565b50919050565b6000806000610f0c6122b2565b90925090506000826003811115610f2557610f25615af0565b14610b745760405162461bcd60e51b815260206004820152603560248201527f65786368616e67655261746553746f7265643a2065786368616e67655261746560448201527414dd1bdc9959125b9d195c9b985b0819985a5b1959605a1b6064820152608401610bff565b3330148015906110125750600560009054906101000a90046001600160a01b03166001600160a01b031663dd5cd22c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110129190615b36565b156110cc57600080546040516345cc970560e01b81526001600160a01b03909116600482015281908190730b1638ce0c7dc434b2ad41ffbc016690a24933d2906345cc970590602401600060405180830381865afa158015611078573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a09190810190615b53565b60005492955090935091506001600160a01b038085169116146110c8576110c883838361237f565b5050505b565b6000806110da81612183565b60006110e833878787612514565b149150610b8681612247565b60008061110184846127b2565b50949350505050565b61111261281c565b6111515760405162461bcd60e51b815260206004820152601060248201526f31b0b63632b9103737ba1030b236b4b760811b6044820152606401610bff565b61115d60028585615501565b5061116a60038383615501565b5050505050565b60008060405180602001604052806111876119d3565b90526001600160a01b0384166000908152601260205260408120549192509081906111b3908490612990565b909250905060008260038111156111cc576111cc615af0565b146112195760405162461bcd60e51b815260206004820152601f60248201527f62616c616e636520636f756c64206e6f742062652063616c63756c61746564006044820152606401610bff565b949350505050565b600061122b6129e3565b905090565b61123861281c565b61126d5760405162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b6044820152606401610bff565b6112ae848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061237f92505050565b50505050565b333014806112c557506112c561281c565b6112f95760405162461bcd60e51b815260206004820152600560248201526410b9b2b63360d91b6044820152606401610bff565b5050600180546001600160b01b0319169055565b60008061131981612183565b60006113236116c5565b9050801561134f5761134781601181111561134057611340615af0565b603b612a52565b925050610ef0565b61135884612acb565b925050610ef981612247565b60008061137081612183565b600061137a6116c5565b146113975760405162461bcd60e51b8152600401610bff90615b06565b600d5491506113a581612247565b5090565b6113b161281c565b6114135760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d6179207365742074686520636f6d702d60448201526c6c696b652064656c656761746560981b6064820152608401610bff565b6015546040516317066a5760e21b81526001600160a01b03838116600483015290911690635c19a95c90602401600060405180830381600087803b15801561145a57600080fd5b505af115801561116a573d6000803e3d6000fd5b6000610b7482612b7c565b60008061148581612183565b600061148f6116c5565b905080156114b3576113478160118111156114ac576114ac615af0565b6052612a52565b61135884612069565b60038054610a8990615abb565b60008060006114d784612bc2565b909250905060008260038111156114f0576114f0615af0565b146115635760405162461bcd60e51b815260206004820152603760248201527f626f72726f7742616c616e636553746f7265643a20626f72726f7742616c616e60448201527f636553746f726564496e7465726e616c206661696c65640000000000000000006064820152608401610bff565b9392505050565b60008061157681612183565b60006115806116c5565b905080156115a45761134781601181111561159d5761159d615af0565b6033612a52565b61135884612c7b565b600080610b8683612cf5565b60006702c68af0bb14000090506000886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162a9190615bf3565b905061163c8888848989868a8a610b8e565b601580546001600160a01b0319166001600160a01b038b16908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b99190615c10565b50505050505050505050565b600b5460009043908114156116dd5760005b91505090565b60006116e76129e3565b90506000600660009054906101000a90046001600160a01b03166001600160a01b03166315f2405383600d5461172c600e54611727600f54601054612d3b565b612d3b565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865afa158015611775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117999190615c10565b905065048c273950008111156117f15760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c792068696768000000006044820152606401610bff565b60008061180085600b54612d71565b9092509050600082600381111561181957611819615af0565b146118665760405162461bcd60e51b815260206004820152601f60248201527f636f756c64206e6f742063616c63756c61746520626c6f636b2064656c7461006044820152606401610bff565b61187285858584612d9c565b9550505050505090565b60008061188881612183565b60006118926116c5565b905080156118b6576113478160118111156118af576118af615af0565b6037612a52565b61135884612ec8565b6000806118cb81612183565b60006118d933338787612514565b1491506118e581612247565b5092915050565b6006546000906001600160a01b031663b81688166119086129e3565b600d5461191f600e54611727600f54601054612d3b565b600854600954600a546119329190615c3f565b61193c9190615c3f565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa15801561198b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190615c10565b600060016119bc81612183565b6119c833868686612fa6565b9150610b8681612247565b6000806119df81612183565b60006119e96116c5565b14611a065760405162461bcd60e51b8152600401610bff90615b06565b611a0e610eff565b91506113a581612247565b6001600160a01b038116600090815260126020526040812054819081908190818080611a4489612bc2565b935090506000816003811115611a5c57611a5c615af0565b14611a7a5760095b6000806000975097509750975050505050611ab3565b611a826122b2565b925090506000816003811115611a9a57611a9a615af0565b14611aa6576009611a64565b5060009650919450925090505b9193509193565b6000610b74826134a3565b6000610b74826134e7565b600080611adb6116c5565b90508015611aff57611563816011811115611af857611af8615af0565b604b612a52565b61156383611d5a565b600080611b16858585613526565b5095945050505050565b6006546000906001600160a01b03166315f24053611b3c6129e3565b600d54611b53600e54611727600f54601054612d3b565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640161196e565b600080611b9081612183565b6000611b9a6116c5565b90508015611bbe57611347816011811115611bb757611bb7615af0565b6059612a52565b61135884611fca565b6000806000611bd581612183565b6000611bdf6116c5565b90508015611c0f57611c03816011811115611bfc57611bfc615af0565b6041612a52565b60009350935050611c20565b611c1a33338761361a565b93509350505b611c2981612247565b50915091565b600080600560009054906101000a90046001600160a01b03169050826001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cab9190615b36565b611cf75760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610bff565b600580546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d91015b60405180910390a16000611563565b600080611d6561281c565b611d75576115636001604d612a52565b43600b5414611d8a57611563600a604c612a52565b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e049190615b36565b611e505760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c7365000000006044820152606401610bff565b600680546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926910160405180910390a16001600160a01b03811615611f3e5760408051600481526024810182526020810180516001600160e01b0316636cc1140b60e11b17905290516001600160a01b03831691611ef891615c57565b6000604051808303816000865af19150503d8060008114611f35576040519150601f19603f3d011682016040523d82523d6000602084013e611f3a565b606091505b5050505b60408051600481526024810182526020810180516001600160e01b031663742a137b60e11b17905290516001600160a01b03851691611f7c91615c57565b6000604051808303816000865af19150503d8060008114611fb9576040519150601f19603f3d011682016040523d82523d6000602084013e611fbe565b606091505b50600091506115639050565b6000611fd461281c565b611fe457610b746001605a612a52565b43600b5414611ff957610b74600a605b612a52565b670de0b6b3a764000061201961201184600854612d3b565b600954612d3b565b111561202b57610b746002605c612a52565b600a80549083905560408051828152602081018590527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f8214609101611d4b565b600043600b541461208057610b74600a6054612a52565b6000198214156120905760085491505b600061209a613a34565b9050670de0b6b3a76400006120ba6120b4600a5486612d3b565b83612d3b565b11156120cc5761156360026055612a52565b8260085414612130576120dd61281c565b6120ed5761156360016053612a52565b600880549084905560408051828152602081018690527fcdd0b588250e1398549f79cfdb8217c186688822905d6715b0834ea1c865594a910160405180910390a1505b806009541461217c57600980549082905560408051828152602081018490527f92eef861b6533b7d3417f39c2ad7b460eed4e88a32fa3604f30e718b7602e7dc910160405180910390a1505b6000611563565b600154600160b01b900460ff166121c95760405162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b6044820152606401610bff565b8061223757600560009054906101000a90046001600160a01b03166001600160a01b031663c90c20b16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561221e57600080fd5b505af1158015612232573d6000803e3d6000fd5b505050505b506001805460ff60b01b19169055565b6001805460ff60b01b1916600160b01b179055806122af57600560009054906101000a90046001600160a01b03166001600160a01b031663632e51426040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561145a57600080fd5b50565b6011546000908190806122cc575050600754600092909150565b60006122d66129e3565b905060006122f06040518060200160405280600081525090565b600061231284600d5461230d600e54611727600f54601054612d3b565b613a88565b93509050600081600381111561232a5761232a615af0565b1461233c579660009650945050505050565b6123468386613ada565b92509050600081600381111561235e5761235e615af0565b14612370579660009650945050505050565b50516000969095509350505050565b6000546040516338e6a07360e11b81526001600160a01b03918216600482015290841660248201528215156044820152730b1638ce0c7dc434b2ad41ffbc016690a24933d2906371cd40e690606401602060405180830381865afa1580156123eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240f9190615b36565b6124435760405162461bcd60e51b8152602060048201526005602482015264085a5b5c1b60da1b6044820152606401610bff565b600080546001600160a01b038581166001600160a01b03198316179092556040519116906124c690309061247b9085906024016155e2565b60408051601f19818403018152918152602080830180516001600160e01b0316630adccee560e31b17905281518083019092526007825266216265636f6d6560c81b90820152613ba5565b50600054604080516001600160a01b03808516825290921660208301527fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a910160405180910390a150505050565b6005546040516317b9b84b60e31b81523060048201526001600160a01b038581166024830152848116604483015260648201849052600092839291169063bdcdc258906084016020604051808303816000875af1158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190615c10565b905080156125ba576125b26003605d83613c41565b915050611219565b836001600160a01b0316856001600160a01b031614156125e0576125b26002605e612a52565b6000856001600160a01b0316876001600160a01b03161415612605575060001961262d565b506001600160a01b038086166000908152601360209081526040808320938a16835292905220545b60008060008061263d8589612d71565b9094509250600084600381111561265657612656615af0565b14612674576126676009605e612a52565b9650505050505050611219565b6001600160a01b038a166000908152601260205260409020546126979089612d71565b909450915060008460038111156126b0576126b0615af0565b146126c1576126676009605f612a52565b6001600160a01b0389166000908152601260205260409020546126e49089613ce3565b909450905060008460038111156126fd576126fd615af0565b1461270e5761266760096060612a52565b6001600160a01b03808b16600090815260126020526040808220859055918b168152208190556000198514612766576001600160a01b03808b166000908152601360209081526040808320938f168352929052208390555b886001600160a01b03168a6001600160a01b0316600080516020615d528339815191528a60405161279991815260200190565b60405180910390a35060009a9950505050505050505050565b60008060006127c081612183565b60006127ca6116c5565b905080156127fa576127ee8160118111156127e7576127e7615af0565b6040612a52565b6000935093505061280b565b61280533878761361a565b93509350505b61281481612247565b509250929050565b600554604080516303e1469160e61b815290516000926001600160a01b031691829163f851a440916004808201926020929091908290030181865afa158015612869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288d9190615c73565b6001600160a01b0316336001600160a01b031614801561290a5750806001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290a9190615b36565b806116d7575033730b1638ce0c7dc434b2ad41ffbc016690a24933d21480156116d75750806001600160a01b0316632f1069ba6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561296c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190615b36565b6000806000806129a08686613d13565b909250905060008260038111156129b9576129b9615af0565b146129ca57509150600090506129dc565b60006129d582613d8f565b9350935050505b9250929050565b6015546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015612a2e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190615c10565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0836011811115612a8757612a87615af0565b836063811115612a9957612a99615af0565b60408051928352602083019190915260009082015260600160405180910390a182601181111561156357611563615af0565b600080612ad661281c565b612ae6576115636001603c612a52565b43600b5414612afb57611563600a603e612a52565b82612b046129e3565b1015612b1657611563600e603d612a52565b600e54831115612b2c576115636002603f612a52565b612b38600e5484613da7565b600e8190559050612b493384613de1565b7f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e338483604051611d4b93929190615c90565b600080612b8881612183565b6000612b926116c5565b90508015612bb657611347816011811115612baf57612baf615af0565b602a612a52565b61135833600086613e66565b6001600160a01b038116600090815260146020526040812080548291829182918291612bf75750600096879650945050505050565b612c078160000154600c546143dd565b90945092506000846003811115612c2057612c20615af0565b14612c3357509195600095509350505050565b612c41838260010154614427565b90945091506000846003811115612c5a57612c5a615af0565b14612c6d57509195600095509350505050565b506000969095509350505050565b60008043600b5414612c9357611563600a6035612a52565b82612c9c6129e3565b1015612cae57611563600e6034612a52565b601054831115612cc45761156360026036612a52565b612cd060105484613da7565b6010819055905061217c730b1638ce0c7dc434b2ad41ffbc016690a24933d284613de1565b6000806000612d0381612183565b6000612d0d6116c5565b90508015612d3157611c03816011811115612d2a57612d2a615af0565b6020612a52565b611c1a3386614452565b60006115638383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250614810565b600080838311612d90576000612d878486615cb1565b915091506129dc565b506003905060006129dc565b600080612db760405180602001604052808681525084614841565b90506000612dc782600d54614872565b90506000612dd782600d54612d3b565b90506000612df86040518060200160405280600a5481525084600e5461488a565b90506000612e1960405180602001604052806009548152508560105461488a565b90506000612e3a604051806020016040528060085481525086600f5461488a565b90506000612e4d87600c54600c5461488a565b600b8d9055600c819055600d869055600e8590556010849055600f839055604080518d815260208101899052908101829052606081018790529091507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009c9b505050505050505050505050565b60008043600b5414612ee057611563600a6039612a52565b82612ee96129e3565b1015612efb57611563600e6038612a52565b600f54831115612f11576115636002603a612a52565b612f1d600f5484613da7565b905080600f8190555061217c600560009054906101000a90046001600160a01b03166001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa09190615c73565b84613de1565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092839291169063d02f73519060a4016020604051808303816000875af1158015613013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130379190615c10565b9050801561304c576125b26003601d83613c41565b846001600160a01b0316846001600160a01b03161415613072576125b26006601e612a52565b6130d7604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0385166000908152601260205260409020546130fa9085612d71565b602083018190528282600381111561311457613114615af0565b600381111561312557613125615af0565b905250600090508151600381111561313f5761313f615af0565b1461316f576131666009601c8360000151600381111561316157613161615af0565b613c41565b92505050611219565b61318e846040518060200160405280666379da05b600008152506148ab565b6080820152604080516020810190915267016345785d8a000081526131b49085906148ab565b61014082015260808101516131d9906131ce908690613da7565b826101400151613da7565b60608201526131e66122b2565b60c083018190528282600381111561320057613200615af0565b600381111561321157613211615af0565b905250600090508151600381111561322b5761322b615af0565b146132785760405162461bcd60e51b815260206004820152601860248201527f65786368616e67652072617465206d617468206572726f7200000000000000006044820152606401610bff565b61329860405180602001604052808360c001518152508260800151614872565b60a0820152604080516020810190915260c082015181526101408201516132bf9190614872565b610160820152600e5460a08201516132d79190612d3b565b60e082015260115460808201516132f1916131ce91613da7565b61012082015260105461016082015161330a9190612d3b565b6101008201526001600160a01b03861660009081526012602052604090205460608201516133389190613ce3565b604083018190528282600381111561335257613352615af0565b600381111561336357613363615af0565b905250600090508151600381111561337d5761337d615af0565b1461339f576131666009601b8360000151600381111561316157613161615af0565b60e0810151600e556101208101516011556101008101516010556020808201516001600160a01b0387811660008181526012855260408082209490945583860151928b1680825290849020929092556060850151925192835290929091600080516020615d52833981519152910160405180910390a3306001600160a01b0316856001600160a01b0316600080516020615d52833981519152836080015160405161344c91815260200190565b60405180910390a360a081015160e08201516040517fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59261348e923092615c90565b60405180910390a16000979650505050505050565b6000806134af81612183565b60006134b96116c5565b905080156134dd576113478160118111156134d6576134d6615af0565b600a612a52565b61135833856148ce565b6000806134f381612183565b60006134fd6116c5565b9050801561351a57611347816011811115612baf57612baf615af0565b61135833856000613e66565b600080600061353481612183565b600061353e6116c5565b9050801561356e5761356281601181111561355b5761355b615af0565b6011612a52565b60009350935050613608565b846001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156135ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d29190615c10565b905080156135f6576135628160118111156135ef576135ef615af0565b6012612a52565b61360233888888614c58565b93509350505b61361181612247565b50935093915050565b600554604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283928392909116906324008a62906084016020604051808303816000875af1158015613682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a69190615c10565b905080156136c7576136bb6003604383613c41565b60009250925050613a2c565b43600b54146136dc576136bb600a6044612a52565b6137256040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b038616600090815260146020526040902060010154606082015261374f86612bc2565b608083018190526020830182600381111561376c5761376c615af0565b600381111561377d5761377d615af0565b905250600090508160200151600381111561379a5761379a615af0565b146137c9576137bc600960428360200151600381111561316157613161615af0565b6000935093505050613a2c565b6000198514156137e257608081015160408201526137ea565b604081018590525b6137f8878260400151615119565b60e08201819052608082015161380d91612d71565b60a083018190526020830182600381111561382a5761382a615af0565b600381111561383b5761383b615af0565b905250600090508160200151600381111561385857613858615af0565b146138cb5760405162461bcd60e51b815260206004820152603a60248201527f52455041595f424f52524f575f4e45575f4143434f554e545f424f52524f575f60448201527f42414c414e43455f43414c43554c4154494f4e5f4641494c45440000000000006064820152608401610bff565b6138db600d548260e00151612d71565b60c08301819052602083018260038111156138f8576138f8615af0565b600381111561390957613909615af0565b905250600090508160200151600381111561392657613926615af0565b1461398d5760405162461bcd60e51b815260206004820152603160248201527f52455041595f424f52524f575f4e45575f544f54414c5f42414c414e43455f43604482015270105310d55310551253d397d19052531151607a1b6064820152608401610bff565b60a081810180516001600160a01b03898116600081815260146020908152604091829020948555600c5460019095019490945560c0870151600d81905560e088015195518251948f16855294840192909252820193909352606081019190915260808101919091527f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1910160405180910390a160e00151600093509150505b935093915050565b6000730b1638ce0c7dc434b2ad41ffbc016690a24933d26001600160a01b031663dd86fea16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561198b573d6000803e3d6000fd5b600080600080613a988787613ce3565b90925090506000826003811115613ab157613ab1615af0565b14613ac25750915060009050613a2c565b613acc8186612d71565b935093505050935093915050565b6000613af26040518060200160405280600081525090565b600080613b0786670de0b6b3a76400006143dd565b90925090506000826003811115613b2057613b20615af0565b14613b3f575060408051602081019091526000815290925090506129dc565b600080613b4c8388614427565b90925090506000826003811115613b6557613b65615af0565b14613b8857816040518060200160405280600081525095509550505050506129dc565b604080516020810190915290815260009890975095505050505050565b6060600080856001600160a01b031685604051613bc29190615c57565b6000604051808303816000865af19150503d8060008114613bff576040519150601f19603f3d011682016040523d82523d6000602084013e613c04565b606091505b509150915081613c3857805115613c1e5780518082602001fd5b8360405162461bcd60e51b8152600401610bff91906155e2565b95945050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115613c7657613c76615af0565b846063811115613c8857613c88615af0565b604080519283526020830191909152810184905260600160405180910390a16003846011811115613cbb57613cbb615af0565b14613cd757836011811115613cd257613cd2615af0565b611219565b611219826103e8615c3f565b60008080613cf18486615c3f565b9050848110613d05576000925090506129dc565b6002600092509250506129dc565b6000613d2b6040518060200160405280600081525090565b600080613d3c8660000151866143dd565b90925090506000826003811115613d5557613d55615af0565b14613d74575060408051602081019091526000815290925090506129dc565b60408051602081019091529081526000969095509350505050565b8051600090610b7490670de0b6b3a764000090615cc8565b60006115638383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506152e3565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091018252602080820180516001600160e01b031663a9059cbb60e01b1790528251808401909352601983527f544f4b454e5f5452414e534645525f4f55545f4641494c45440000000000000090830152613e6291615312565b5050565b6000821580613e73575081155b613edc5760405162461bcd60e51b815260206004820152603460248201527f6f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416044820152736d6f756e74496e206d757374206265207a65726f60601b6064820152608401610bff565b613f1d6040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b613f256122b2565b6040830181905260208301826003811115613f4257613f42615af0565b6003811115613f5357613f53615af0565b9052506000905081602001516003811115613f7057613f70615af0565b14613f9a57613f926009602e8360200151600381111561316157613161615af0565b915050611563565b8315614033576060810184905260408051602081018252908201518152613fc19085612990565b6080830181905260208301826003811115613fde57613fde615af0565b6003811115613fef57613fef615af0565b905250600090508160200151600381111561400c5761400c615af0565b1461402e57613f926009602c8360200151600381111561316157613161615af0565b6140c4565b61404f8360405180602001604052808460400151815250615369565b606083018190526020830182600381111561406c5761406c615af0565b600381111561407d5761407d615af0565b905250600090508160200151600381111561409a5761409a615af0565b146140bc57613f926009602d8360200151600381111561316157613161615af0565b608081018390525b600554606082015160405163eabe7d9160e01b81526000926001600160a01b03169163eabe7d91916140fd9130918b9190600401615cea565b6020604051808303816000875af115801561411c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141409190615c10565b9050801561415e576141556003602b83613c41565b92505050611563565b43600b541461417357614155600a602f612a52565b6141836011548360600151612d71565b60a08401819052602084018260038111156141a0576141a0615af0565b60038111156141b1576141b1615af0565b90525060009050826020015160038111156141ce576141ce615af0565b146141f057614155600960318460200151600381111561316157613161615af0565b6001600160a01b03861660009081526012602052604090205460608301516142189190612d71565b60c084018190526020840182600381111561423557614235615af0565b600381111561424657614246615af0565b905250600090508260200151600381111561426357614263615af0565b1461428557614155600960308460200151600381111561316157613161615af0565b81608001516142926129e3565b10156142a457614155600e6032612a52565b6142b2868360800151613de1565b60a082015160115560c08201516001600160a01b0387166000818152601260205260409081902092909255606084015191513092600080516020615d528339815191529161430291815260200190565b60405180910390a3608082015160608301516040517fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92992614344928a92615c90565b60405180910390a1600554608083015160608401516040516351dff98960e01b81523060048201526001600160a01b038a81166024830152604482019390935260648101919091529116906351dff98990608401600060405180830381600087803b1580156143b257600080fd5b505af11580156143c6573d6000803e3d6000fd5b50600092506143d3915050565b9695505050505050565b600080836143f0575060009050806129dc565b60006143fc8486615d0e565b9050836144098683615cc8565b1461441c576002600092509250506129dc565b6000925090506129dc565b6000808261443b57506001905060006129dc565b60006144478486615cc8565b915091509250929050565b600554604051634ef4c3e160e01b8152600091829182916001600160a01b031690634ef4c3e19061448b90309089908990600401615cea565b6020604051808303816000875af11580156144aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ce9190615c10565b905080156144ef576144e36003602183613c41565b600092509250506129dc565b43600b5414614504576144e3600a6024612a52565b6145456040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61454d6122b2565b604083018190526020830182600381111561456a5761456a615af0565b600381111561457b5761457b615af0565b905250600090508160200151600381111561459857614598615af0565b146145c7576145ba600960238360200151600381111561316157613161615af0565b60009350935050506129dc565b6145d18686615119565b60c08201819052604080516020810182529083015181526145f29190615369565b606083018190526020830182600381111561460f5761460f615af0565b600381111561462057614620615af0565b905250600090508160200151600381111561463d5761463d615af0565b1461468a5760405162461bcd60e51b815260206004820181905260248201527f4d494e545f45584348414e47455f43414c43554c4154494f4e5f4641494c45446044820152606401610bff565b61469a6011548260600151612d3b565b60808201526001600160a01b03861660009081526012602052604090205460608201516146c79190612d3b565b60a0820181905260808201516011556001600160a01b038716600090815260126020526040908190209190915560c0820151606083015191517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f92614730928a92909190615c90565b60405180910390a1856001600160a01b0316306001600160a01b0316600080516020615d52833981519152836060015160405161476f91815260200190565b60405180910390a360055460c082015160608301516040516341c728b960e01b81523060048201526001600160a01b038a81166024830152604482019390935260648101919091529116906341c728b990608401600060405180830381600087803b1580156147dd57600080fd5b505af11580156147f1573d6000803e3d6000fd5b50600092506147fe915050565b8160c001519350935050509250929050565b60008061481d8486615c3f565b905082858210156111015760405162461bcd60e51b8152600401610bff91906155e2565b6040805160208101909152600081526040518060200160405280614869856000015185615379565b90529392505050565b60008061487f8484614841565b905061121981613d8f565b6000806148978585614841565b9050613c386148a582613d8f565b84612d3b565b6000670de0b6b3a76400006148c4848460000151615379565b6115639190615cc8565b60055460405163368f515360e21b815260009182916001600160a01b039091169063da3d454c9061490790309088908890600401615cea565b6020604051808303816000875af1158015614926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061494a9190615c10565b905080156149675761495f6003601083613c41565b915050610b74565b43600b541461497c5761495f600a600c612a52565b60006149866129e3565b9050838110156149a55761499c600e600b612a52565b92505050610b74565b6149d1604080516080810190915280600081526020016000815260200160008152602001600081525090565b6149da86612bc2565b60208301819052828260038111156149f4576149f4615af0565b6003811115614a0557614a05615af0565b9052506000905081516003811115614a1f57614a1f615af0565b14614a4a57614a406009808360000151600381111561316157613161615af0565b9350505050610b74565b614a58816020015186613ce3565b6040830181905282826003811115614a7257614a72615af0565b6003811115614a8357614a83615af0565b9052506000905081516003811115614a9d57614a9d615af0565b14614abf57614a406009600e8360000151600381111561316157613161615af0565b6005546040828101519051631de6c8a560e21b815230600482015260248101919091526001600160a01b039091169063779b2294906044016020604051808303816000875af1158015614b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b3a9190615c10565b92508215614b4f57614a406003601085613c41565b614b5b600d5486613ce3565b6060830181905282826003811115614b7557614b75615af0565b6003811115614b8657614b86615af0565b9052506000905081516003811115614ba057614ba0615af0565b14614bc257614a406009600d8360000151600381111561316157613161615af0565b614bcc8686613de1565b604081810180516001600160a01b03891660008181526014602090815290859020928355600c54600190930192909255606080860151600d819055935185519283529282018a905293810191909152918201527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a160009695505050505050565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000928392839290911690635fc7e71e9060a4016020604051808303816000875af1158015614cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cec9190615c10565b90508015614d0d57614d016003601483613c41565b60009250925050615110565b43600b5414614d2257614d01600a6018612a52565b43846001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d859190615c10565b14614d9657614d01600a6013612a52565b866001600160a01b0316866001600160a01b03161415614dbc57614d0160066019612a52565b84614dcd57614d0160076017612a52565b600019851415614de357614d0160076016612a52565b600080614df189898961361a565b90925090508115614e2657614e18826011811115614e1157614e11615af0565b601a612a52565b600094509450505050615110565b60055460405163c488847b60e01b815260009182916001600160a01b039091169063c488847b90614e5f9030908c908890600401615cea565b6040805180830381865afa158015614e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e9f9190615d2d565b90925090508115614f0e5760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b6064820152608401610bff565b6040516370a0823160e01b81526001600160a01b038b811660048301528291908a16906370a0823190602401602060405180830381865afa158015614f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f7b9190615c10565b1015614fc95760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d55434800000000000000006044820152606401610bff565b60006001600160a01b038916301415614fef57614fe8308d8d85612fa6565b9050615065565b60405163b2a02ff160e01b81526001600160a01b038a169063b2a02ff19061501f908f908f908790600401615cea565b6020604051808303816000875af115801561503e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150629190615c10565b90505b80156150aa5760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b6044820152606401610bff565b604080516001600160a01b038e811682528d811660208301528183018790528b1660608201526080810184905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a16000975092955050505050505b94509492505050565b6015546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015615166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061518a9190615c10565b905061521a6323b872dd60e01b8530866040516024016151ac93929190615cea565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060400160405280601881526020017f544f4b454e5f5452414e534645525f494e5f4641494c45440000000000000000815250615312565b6015546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015615263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152879190615c10565b9050818110156152d95760405162461bcd60e51b815260206004820152601a60248201527f544f4b454e5f5452414e534645525f494e5f4f564552464c4f570000000000006044820152606401610bff565b613c388282615cb1565b600081848411156153075760405162461bcd60e51b8152600401610bff91906155e2565b506112198385615cb1565b60155460009061532c906001600160a01b03168484613ba5565b8051909150156110c8578080602001905181019061534a9190615b36565b82906112ae5760405162461bcd60e51b8152600401610bff91906155e2565b6000806000806129a086866153bb565b600061156383836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f7700000000000000000081525061542e565b60006153d36040518060200160405280600081525090565b6000806153e8670de0b6b3a7640000876143dd565b9092509050600082600381111561540157615401615af0565b14615420575060408051602081019091526000815290925090506129dc565b6129d5818660000151613ada565b600083158061543b575082155b1561544857506000611563565b60006154548486615d0e565b9050836154618683615cc8565b1483906111015760405162461bcd60e51b8152600401610bff91906155e2565b82805461548d90615abb565b90600052602060002090601f0160209004810192826154af57600085556154f5565b82601f106154c857805160ff19168380011785556154f5565b828001600101855582156154f5579182015b828111156154f55782518255916020019190600101906154da565b506113a5929150615575565b82805461550d90615abb565b90600052602060002090601f01602090048101928261552f57600085556154f5565b82601f106155485782800160ff198235161785556154f5565b828001600101855582156154f5579182015b828111156154f557823582559160200191906001019061555a565b5b808211156113a55760008155600101615576565b60005b838110156155a557818101518382015260200161558d565b838111156112ae5750506000910152565b600081518084526155ce81602086016020860161558a565b601f01601f19169290920160200192915050565b60208152600061156360208301846155b6565b6001600160a01b03811681146122af57600080fd5b6000806040838503121561561d57600080fd5b8235615628816155f5565b946020939093013593505050565b60006020828403121561564857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561568e5761568e61564f565b604052919050565b600067ffffffffffffffff8211156156b0576156b061564f565b50601f01601f191660200190565b600082601f8301126156cf57600080fd5b81356156e26156dd82615696565b615665565b8181528460208386010111156156f757600080fd5b816020850160208301376000918101602001919091529392505050565b60ff811681146122af57600080fd5b600080600080600080600080610100898b03121561574057600080fd5b883561574b816155f5565b9750602089013561575b816155f5565b965060408901359550606089013567ffffffffffffffff8082111561577f57600080fd5b61578b8c838d016156be565b965060808b01359150808211156157a157600080fd5b506157ae8b828c016156be565b94505060a08901356157bf81615714565b979a969950949793969295929450505060c08201359160e0013590565b6000602082840312156157ee57600080fd5b8135611563816155f5565b60008060006060848603121561580e57600080fd5b8335615819816155f5565b92506020840135615829816155f5565b929592945050506040919091013590565b60008083601f84011261584c57600080fd5b50813567ffffffffffffffff81111561586457600080fd5b6020830191508360208285010111156129dc57600080fd5b6000806000806040858703121561589257600080fd5b843567ffffffffffffffff808211156158aa57600080fd5b6158b68883890161583a565b909650945060208701359150808211156158cf57600080fd5b506158dc8782880161583a565b95989497509550505050565b80151581146122af57600080fd5b6000806000806060858703121561590c57600080fd5b8435615917816155f5565b93506020850135615927816158e8565b9250604085013567ffffffffffffffff81111561594357600080fd5b6158dc8782880161583a565b6000806020838503121561596257600080fd5b823567ffffffffffffffff81111561597957600080fd5b6159858582860161583a565b90969095509350505050565b600080600080600080600060e0888a0312156159ac57600080fd5b87356159b7816155f5565b965060208801356159c7816155f5565b955060408801356159d7816155f5565b9450606088013567ffffffffffffffff808211156159f457600080fd5b615a008b838c016156be565b955060808a0135915080821115615a1657600080fd5b50615a238a828b016156be565b93505060a0880135915060c0880135905092959891949750929550565b60008060408385031215615a5357600080fd5b8235615a5e816155f5565b91506020830135615a6e816155f5565b809150509250929050565b600080600060608486031215615a8e57600080fd5b8335615a99816155f5565b9250602084013591506040840135615ab0816155f5565b809150509250925092565b600181811c90821680615acf57607f821691505b60208210811415610ef957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6020808252601690820152751858d8dc9d59481a5b9d195c995cdd0819985a5b195960521b604082015260600190565b600060208284031215615b4857600080fd5b8151611563816158e8565b600080600060608486031215615b6857600080fd5b8351615b73816155f5565b6020850151909350615b84816158e8565b604085015190925067ffffffffffffffff811115615ba157600080fd5b8401601f81018613615bb257600080fd5b8051615bc06156dd82615696565b818152876020838501011115615bd557600080fd5b615be682602083016020860161558a565b8093505050509250925092565b600060208284031215615c0557600080fd5b815161156381615714565b600060208284031215615c2257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115615c5257615c52615c29565b500190565b60008251615c6981846020870161558a565b9190910192915050565b600060208284031215615c8557600080fd5b8151611563816155f5565b6001600160a01b039390931683526020830191909152604082015260600190565b600082821015615cc357615cc3615c29565b500390565b600082615ce557634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000816000190483118215151615615d2857615d28615c29565b500290565b60008060408385031215615d4057600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122065de6bdae40ec8867685f6ecd7ce6275fc0237313f64d3b26de269469ac79ff164736f6c634300080b0033",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded bytes data for any initialization"
        }
      },
      "_delegateCompLikeTo(address)": {
        "details": "CTokens whose underlying are not CompLike should revert here",
        "params": {
          "compLikeDelegatee": "The address to delegate votes to"
        }
      },
      "_prepare()": {
        "details": "Checks comptroller.autoImplementation and upgrades the implementation if necessary"
      },
      "_reduceReserves(uint256)": {
        "params": {
          "reduceAmount": "Amount of reduction to reserves"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setAdminFee(uint256)": {
        "details": "Admin function to accrue interest and set a new admin fee",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setImplementationSafe(address,bool,bytes)": {
        "params": {
          "allowResign": "Flag to indicate whether to call _resignImplementation on the old implementation",
          "becomeImplementationData": "The encoded bytes data to be passed to _becomeImplementation",
          "implementation_": "The address of the new implementation for delegation"
        }
      },
      "_setInterestRateModel(address)": {
        "details": "Admin function to accrue interest and update the interest rate model",
        "params": {
          "newInterestRateModel": "the new interest rate model to use"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setNameAndSymbol(string,string)": {
        "details": "Admin function to update the cToken ERC20 name and symbol",
        "params": {
          "_name": "the new ERC20 token name to use",
          "_symbol": "the new ERC20 token symbol to use"
        }
      },
      "_setReserveFactor(uint256)": {
        "details": "Admin function to accrue interest and set a new reserve factor",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_withdrawAdminFees(uint256)": {
        "params": {
          "withdrawAmount": "Amount of fees to withdraw"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_withdrawFuseFees(uint256)": {
        "params": {
          "withdrawAmount": "Amount of fees to withdraw"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "accrueInterest()": {
        "details": "This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage."
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address of the account which owns the tokens to be spent",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "The number of tokens allowed to be spent (-1 means infinite)"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "amount": "The number of tokens that are approved (-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The number of tokens owned by `owner`"
        }
      },
      "balanceOfUnderlying(address)": {
        "details": "This also accrues interest in a transaction",
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The amount of underlying owned by `owner`"
        }
      },
      "borrow(uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset to borrow"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "borrowBalanceCurrent(address)": {
        "params": {
          "account": "The address whose balance should be calculated after updating borrowIndex"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowBalanceStored(address)": {
        "params": {
          "account": "The address whose balance should be calculated"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowRatePerBlock()": {
        "returns": {
          "_0": "The borrow interest rate per block, scaled by 1e18"
        }
      },
      "exchangeRateCurrent()": {
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "exchangeRateStored()": {
        "details": "This function does not accrue interest before calculating the exchange rate",
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "getAccountSnapshot(address)": {
        "details": "This is used by comptroller to more efficiently perform liquidity checks.",
        "params": {
          "account": "Address of the account to snapshot"
        },
        "returns": {
          "_0": "(possible error, token balance, borrow balance, exchange rate mantissa)"
        }
      },
      "getCash()": {
        "returns": {
          "_0": "The quantity of underlying asset owned by this contract"
        }
      },
      "initialize(address,address,address,string,string,uint256,uint256)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "ERC-20 name of this token",
          "symbol_": "ERC-20 symbol of this token",
          "underlying_": "The address of the underlying asset"
        }
      },
      "initialize(address,address,uint256,string,string,uint8,uint256,uint256)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "EIP-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "EIP-20 name of this token",
          "symbol_": "EIP-20 symbol of this token"
        }
      },
      "liquidateBorrow(address,uint256,address)": {
        "params": {
          "borrower": "The borrower of this cToken to be liquidated",
          "cTokenCollateral": "The market in which to seize collateral from the borrower",
          "repayAmount": "The amount of the underlying borrowed asset to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "mint(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "mintAmount": "The amount of the underlying asset to supply"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeem(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemTokens": "The number of cTokens to redeem into underlying"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeemUnderlying(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemAmount": "The amount of underlying to redeem"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrow(uint256)": {
        "params": {
          "repayAmount": "The amount to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrowBehalf(address,uint256)": {
        "params": {
          "borrower": "the account with the debt being payed off",
          "repayAmount": "The amount to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
        "params": {
          "borrower": "The account having collateral seized",
          "liquidator": "The account receiving seized collateral",
          "seizeTokens": "The number of cTokens to seize"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "supplyRatePerBlock()": {
        "returns": {
          "_0": "The supply interest rate per block, scaled by 1e18"
        }
      },
      "totalBorrowsCurrent()": {
        "returns": {
          "_0": "The total borrows with interest"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "title": "Compound's CErc20Delegate Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccrueInterest(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when interest is accrued"
      },
      "Approval(address,address,uint256)": {
        "notice": "EIP20 Approval event"
      },
      "Borrow(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when underlying is borrowed"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a borrow is liquidated"
      },
      "Mint(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are minted"
      },
      "NewAdminFee(uint256,uint256)": {
        "notice": "Event emitted when the admin fee is changed"
      },
      "NewComptroller(address,address)": {
        "notice": "Event emitted when comptroller is changed"
      },
      "NewFuseFee(uint256,uint256)": {
        "notice": "Event emitted when the Fuse fee is changed"
      },
      "NewImplementation(address,address)": {
        "notice": "Emitted when implementation is changed"
      },
      "NewMarketInterestRateModel(address,address)": {
        "notice": "Event emitted when interestRateModel is changed"
      },
      "NewReserveFactor(uint256,uint256)": {
        "notice": "Event emitted when the reserve factor is changed"
      },
      "Redeem(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are redeemed"
      },
      "RepayBorrow(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a borrow is repaid"
      },
      "ReservesAdded(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are added"
      },
      "ReservesReduced(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are reduced"
      },
      "Transfer(address,address,uint256)": {
        "notice": "EIP20 Transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "_becomeImplementation(bytes)": {
        "notice": "Called by the delegator on a delegate to initialize it for duty"
      },
      "_delegateCompLikeTo(address)": {
        "notice": "Admin call to delegate the votes of the COMP-like underlying"
      },
      "_prepare()": {
        "notice": "Function called before all delegator functions"
      },
      "_reduceReserves(uint256)": {
        "notice": "Accrues interest and reduces reserves by transferring to admin"
      },
      "_setAdminFee(uint256)": {
        "notice": "accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh"
      },
      "_setImplementationSafe(address,bool,bytes)": {
        "notice": "Called by the admin to update the implementation of the delegator"
      },
      "_setInterestRateModel(address)": {
        "notice": "accrues interest and updates the interest rate model using _setInterestRateModelFresh"
      },
      "_setNameAndSymbol(string,string)": {
        "notice": "updates the cToken ERC20 name and symbol"
      },
      "_setReserveFactor(uint256)": {
        "notice": "accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"
      },
      "_withdrawAdminFees(uint256)": {
        "notice": "Accrues interest and reduces admin fees by transferring to admin"
      },
      "_withdrawFuseFees(uint256)": {
        "notice": "Accrues interest and reduces Fuse fees by transferring to Fuse"
      },
      "accrualBlockNumber()": {
        "notice": "Block number that interest was last accrued at"
      },
      "accrueInterest()": {
        "notice": "Applies accrued interest to total borrows and reserves"
      },
      "adminFeeMantissa()": {
        "notice": "Fraction of interest currently set aside for admin fees"
      },
      "allowance(address,address)": {
        "notice": "Get the current allowance from `owner` for `spender`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the token balance of the `owner`"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Get the underlying balance of the `owner`"
      },
      "borrow(uint256)": {
        "notice": "Sender borrows assets from the protocol to their own address"
      },
      "borrowBalanceCurrent(address)": {
        "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"
      },
      "borrowBalanceStored(address)": {
        "notice": "Return the borrow balance of account based on stored data"
      },
      "borrowIndex()": {
        "notice": "Accumulator of the total earned interest rate since the opening of the market"
      },
      "borrowRatePerBlock()": {
        "notice": "Returns the current per-block borrow interest rate for this cToken"
      },
      "comptroller()": {
        "notice": "Contract which oversees inter-cToken operations"
      },
      "constructor": {
        "notice": "Construct an empty delegate"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "exchangeRateCurrent()": {
        "notice": "Accrue interest then return the up-to-date exchange rate"
      },
      "exchangeRateStored()": {
        "notice": "Calculates the exchange rate from the underlying to the CToken"
      },
      "fuseFeeMantissa()": {
        "notice": "Fraction of interest currently set aside for Fuse fees"
      },
      "getAccountSnapshot(address)": {
        "notice": "Get a snapshot of the account's balances, and the cached exchange rate"
      },
      "getCash()": {
        "notice": "Get cash balance of this cToken in the underlying asset"
      },
      "implementation()": {
        "notice": "Implementation address for this contract"
      },
      "initialize(address,address,address,string,string,uint256,uint256)": {
        "notice": "Initialize the new money market"
      },
      "initialize(address,address,uint256,string,string,uint8,uint256,uint256)": {
        "notice": "Initialize the money market"
      },
      "interestRateModel()": {
        "notice": "Model which tells what the current interest rate should be"
      },
      "isCEther()": {
        "notice": "Indicator that this is or is not a CEther contract (for inspection)"
      },
      "isCToken()": {
        "notice": "Indicator that this is a CToken contract (for inspection)"
      },
      "liquidateBorrow(address,uint256,address)": {
        "notice": "The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."
      },
      "mint(uint256)": {
        "notice": "Sender supplies assets into the market and receives cTokens in exchange"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "redeem(uint256)": {
        "notice": "Sender redeems cTokens in exchange for the underlying asset"
      },
      "redeemUnderlying(uint256)": {
        "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
      },
      "repayBorrow(uint256)": {
        "notice": "Sender repays their own borrow"
      },
      "repayBorrowBehalf(address,uint256)": {
        "notice": "Sender repays a borrow belonging to borrower"
      },
      "reserveFactorMantissa()": {
        "notice": "Fraction of interest currently set aside for reserves"
      },
      "seize(address,address,uint256)": {
        "notice": "Transfers collateral tokens (this market) to the liquidator."
      },
      "supplyRatePerBlock()": {
        "notice": "Returns the current per-block supply interest rate for this cToken"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalAdminFees()": {
        "notice": "Total amount of admin fees of the underlying held in this market"
      },
      "totalBorrows()": {
        "notice": "Total amount of outstanding borrows of the underlying in this market"
      },
      "totalBorrowsCurrent()": {
        "notice": "Returns the current total borrows plus accrued interest"
      },
      "totalFuseFees()": {
        "notice": "Total amount of Fuse fees of the underlying held in this market"
      },
      "totalReserves()": {
        "notice": "Total amount of reserves of the underlying held in this market"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "underlying()": {
        "notice": "Underlying asset for this CToken"
      }
    },
    "notice": "CTokens which wrap an EIP-20 underlying and are delegated to",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10412,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "implementation",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16363,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "__admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 16366,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "__fuseAdminHasRights",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 16369,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "__adminHasRights",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 16375,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "_notEntered",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 16378,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 16381,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 16384,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 16392,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "__pendingAdmin",
        "offset": 1,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 16396,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "comptroller",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ComptrollerInterface)21208"
      },
      {
        "astId": 16400,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(InterestRateModel)26124"
      },
      {
        "astId": 16402,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 16405,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "adminFeeMantissa",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 16408,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "fuseFeeMantissa",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 16411,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 16414,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 16417,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 16420,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 16423,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalReserves",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 16426,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalAdminFees",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 16429,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalFuseFees",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 16432,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalSupply",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 16436,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "accountTokens",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16442,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 16452,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "accountBorrows",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(BorrowSnapshot)16447_storage)"
      },
      {
        "astId": 16771,
        "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
        "label": "underlying",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerInterface)21208": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(InterestRateModel)26124": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowSnapshot)16447_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CTokenStorage.BorrowSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowSnapshot)16447_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowSnapshot)16447_storage": {
        "encoding": "inplace",
        "label": "struct CTokenStorage.BorrowSnapshot",
        "members": [
          {
            "astId": 16444,
            "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16446,
            "contract": "contracts/compound/CErc20Delegate.sol:CErc20Delegate",
            "label": "interestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}