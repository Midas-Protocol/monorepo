name: Liquidator-Bot/Push/PR - Create and publish a Docker image & Deploy

on:
  push:
    branches: [main, development]
    paths:
      - '.github/workflows/deploy-bots.yaml'
      - 'packages/bots/**'
      - 'packages/monitors/**'
      - 'docker/liquidator/**'
      - 'docker/oracles-monitor/**'
      - 'packages/sdk/**'
      - 'packages/chains/**'
      - 'ops/**'
  pull_request:
    branches: [main, development]
    paths:
      - '.github/workflows/deploy-bots.yaml'
      - 'packages/bots/**'
      - 'packages/monitors/**'
      - 'docker/liquidator/**'
      - 'docker/oracles-monitor/**'
      - 'packages/sdk/**'
      - 'packages/chains/**'
      - 'ops/**'

jobs:
  terraform-infra:
    # if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy Infra to AWS
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform Plan
        working-directory: ./ops
        run: make infra-plan

      - name: Terraform Deploy
        working-directory: ./ops
        run: make infra-deploy

  lint-bots:
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      MNEMONIC: '${{ secrets.MNEMONIC }}'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install `packages`
        run: yarn install
        env:
          # Fixes issue: `ethereumjs-abi: The remote archive doesn't match the expected checksum`
          YARN_CHECKSUM_BEHAVIOR: update

      - name: Build `sdk`
        run: yarn build:sdk

      - name: Lint `liquidator`
        run: yarn workspace @midas-capital/liquidator lint

      - name: Lint `oracles-monitor`
        run: yarn workspace @midas-capital/oracles-monitor lint

  build-and-push-liquidator-image:
    needs: [terraform-infra]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: midas-protocol/liquidator
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/liquidator/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-oracles-monitor-image:
    needs: [terraform-infra]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: midas-protocol/oracles-monitor

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/oracles-monitor/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-oracle-ecr:
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    needs: [terraform-infra]
    runs-on: ubuntu-latest
    env:
      REGISTRY: 347632749353.dkr.ecr.eu-central-1.amazonaws.com
      IMAGE_TAG: ${{ github.sha }}
      REPOSITORY: oracle-monitor

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Private ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Avoids rate limits error on pulling from public ECR
      - name: Login to Public ECR
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Log in to GH Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, tag, and push docker image to Amazon ECR Public
        run: |
          docker build -f docker/oracles-monitor/Dockerfile.lambda -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t ghcr.io/midas-protocol/oracles-monitor:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push ghcr.io/midas-protocol/oracles-monitor:$IMAGE_TAG

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push-liquidator-image, build-and-push-oracles-monitor-image, lint-bots]
    env:
      ETHEREUM_ADMIN_ACCOUNT: '${{ secrets.ETHEREUM_ADMIN_ACCOUNT }}'
      ETHEREUM_ADMIN_PRIVATE_KEY: '${{ secrets.ETHEREUM_ADMIN_PRIVATE_KEY }}'
      LIQUIDATOR_BOT_IMAGE: ${{ fromJSON(needs.build-and-push-liquidator-image.outputs.json).tags[0] }}
      ORACLES_MONITOR_IMAGE: ${{ fromJSON(needs.build-and-push-oracles-monitor-image.outputs.json).tags[0] }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: run smoke tests for liquidator bot
        working-directory: ./ops
        run: make liquidator-smoke-test

      - name: run smoke tests for oracles montior
        working-directory: ./ops
        run: make oracles-monitor-smoke-test

    outputs:
      twap-tags: ${{ needs.build-and-push-twap-image.outputs.json }}
      liquidator-tags: ${{ needs.build-and-push-liquidator-image.outputs.json }}
      oracles-monitor-tags: ${{ needs.build-and-push-oracles-monitor-image.outputs.json }}

  terraform-deploy-bots:
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    name: Deploy bots to ECS
    env:
      ETHEREUM_ADMIN_ACCOUNT: '${{ secrets.ETHEREUM_ADMIN_ACCOUNT }}'
      ETHEREUM_ADMIN_PRIVATE_KEY: '${{ secrets.ETHEREUM_ADMIN_PRIVATE_KEY }}'
      POKT_API_KEY: '${{ secrets.POKT_API_KEY }}'
      CHAINSTACK_BSC_RPC_URL: '${{ secrets.CHAINSTACK_BSC_RPC_URL }}'
      CHAINSTACK_POLYGON_RPC_URL: '${{ secrets.CHAINSTACK_POLYGON_RPC_URL }}'
      LIQUIDATION_DISCORD_WEBHOOK_URL: ${{ secrets.LIQUIDATION_DISCORD_WEBHOOK_URL }}
      ECS_NOTIFIER_DISCORD_WEBHOOK_URL: ${{ secrets.ECS_NOTIFIER_DISCORD_WEBHOOK_URL }}
      ORACLES_DISCORD_WEBHOOK_URL: ${{ secrets.ORACLES_DISCORD_WEBHOOK_URL }}
      LIQUIDATOR_BOT_IMAGE: ${{ fromJSON(needs.smoke-tests.outputs.liquidator-tags).tags[0] }}
      ORACLES_MONITOR_IMAGE: ${{ fromJSON(needs.smoke-tests.outputs.oracles-monitor-tags).tags[0] }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform Plan
        working-directory: ./ops
        run: make prod-plan

      - name: Terraform Deploy
        working-directory: ./ops
        run: make prod-deploy
