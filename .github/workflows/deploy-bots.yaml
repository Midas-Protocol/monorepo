name: Liquidator-Bot/Push/PR - Create and publish a Docker image

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/deploy-bots.yaml'
      - 'packages/fuse-liquidator-bot/**'
      - 'packages/fuse-twap-bot/**'
      - 'packages/sdk/**'
      - 'docker/liquidator/**'
      - 'docker/twap/**'
      - 'ops/**'
  pull_request:
    branches: [main, development]
    paths:
      - '.github/workflows/deploy-bots.yaml'
      - 'packages/fuse-liquidator-bot/**'
      - 'packages/fuse-twap-bot/**'
      - 'packages/sdk/**'
      - 'docker/liquidator/**'
      - 'docker/twap/**'
      - 'ops/**'

jobs:
  lint-bots:
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      MNEMONIC: '${{ secrets.MNEMONIC }}'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install `packages`
        run: yarn install
        env:
          # Fixes issue: `ethereumjs-abi: The remote archive doesn't match the expected checksum`
          YARN_CHECKSUM_BEHAVIOR: update

      - name: Build `sdk`
        run: yarn workspace @midas-capital/sdk build

      - name: Lint `fuse-liquidator-bot`
        run: yarn workspace @midas-capital/fuse-liquidator-bot lint

      - name: Lint `fuse-twap-bot`
        run: yarn workspace @midas-capital/fuse-twap-bot lint

      - name: Lint `oracles-monitor`
        run: yarn workspace @midas-capital/oracles-monitor lint

  build-and-push-liquidator-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: midas-protocol/liquidator
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/liquidator/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-twap-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: midas-protocol/twap

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/twap/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-oracles-monitor-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: midas-protocol/oracles-monitor

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: '${{ secrets.ACCESS_TOKEN }}'

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/oracles-monitor/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs:
      [
        build-and-push-liquidator-image,
        build-and-push-twap-image,
        build-and-push-oracles-monitor-image,
        lint-bots,
      ]
    env:
      ETHEREUM_ADMIN_ACCOUNT: '${{ secrets.ETHEREUM_ADMIN_ACCOUNT }}'
      ETHEREUM_ADMIN_PRIVATE_KEY: '${{ secrets.ETHEREUM_ADMIN_PRIVATE_KEY }}'
      NODEREAL_BSC_API_KEY: '${{ secrets.NODEREAL_BSC_API_KEY }}'
      NODEREAL_MATIC_API_KEY: '${{ secrets.NODEREAL_MATIC_API_KEY }}'
      TWAP_BOT_IMAGE: ${{ fromJSON(needs.build-and-push-twap-image.outputs.json).tags[0] }}
      LIQUIDATOR_BOT_IMAGE: ${{ fromJSON(needs.build-and-push-liquidator-image.outputs.json).tags[0] }}
      ORACLES_MONITOR_IMAGE: ${{ fromJSON(needs.build-and-push-oracles-monitor-image.outputs.json).tags[0] }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: run smoke tests for liquidator bot
        working-directory: ./ops
        run: make fuse-liquidator-bot-smoke-test

      - name: run smoke tests for twap bot
        working-directory: ./ops
        run: make fuse-twap-bot-smoke-test

      - name: run smoke tests for oracles montior
        working-directory: ./ops
        run: make oracles-monitor-smoke-test

    outputs:
      twap-tags: ${{ needs.build-and-push-twap-image.outputs.json }}
      liquidator-tags: ${{ needs.build-and-push-liquidator-image.outputs.json }}
      oracles-monitor-tags: ${{ needs.build-and-push-oracles-monitor-image.outputs.json }}

  terraform-deploy-bots:
    if: github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    name: Deploy bots to ECS
    env:
      ETHEREUM_ADMIN_ACCOUNT: '${{ secrets.ETHEREUM_ADMIN_ACCOUNT }}'
      ETHEREUM_ADMIN_PRIVATE_KEY: '${{ secrets.ETHEREUM_ADMIN_PRIVATE_KEY }}'
      MORALIS_API_KEY: '${{ secrets.MORALIS_API_KEY }}'
      POKT_API_KEY: '${{ secrets.POKT_API_KEY }}'
      GETBLOCK_API_KEY: '${{ secrets.GETBLOCK_API_KEY }}'
      NODEREAL_BSC_API_KEY: '${{ secrets.NODEREAL_BSC_API_KEY }}'
      NODEREAL_MATIC_API_KEY: '${{ secrets.NODEREAL_MATIC_API_KEY }}'
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TWAP_BOT_IMAGE: ${{ fromJSON(needs.smoke-tests.outputs.twap-tags).tags[0] }}
      LIQUIDATOR_BOT_IMAGE: ${{ fromJSON(needs.smoke-tests.outputs.liquidator-tags).tags[0] }}
      ORACLES_MONITOR_IMAGE: ${{ fromJSON(needs.smoke-tests.outputs.oracles-monitor-tags).tags[0] }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform Plan
        working-directory: ./ops
        run: make plan

      - name: Terraform Deploy
        working-directory: ./ops
        run: make deploy
